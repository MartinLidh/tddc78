.TH mpirun 1 "11/23/1999" " " "MPI Commands"
.SH NAME
mpirun \-  Run mpi programs 
.SH DESCRIPTION
"mpirun" is a shell script that attempts to hide the differences in
starting jobs for various devices from the user. Mpirun attempts to
determine what kind of machine it is running on and start the required
number of jobs on that machine. On workstation clusters, if you are
not using Chameleon, you must supply a file that lists the different
machines that mpirun can use to run remote jobs or specify this file
every time you run mpirun with the -machine file option. The default
file is in util/machines/machines.<arch>.

mpirun typically works like this
.nf
mpirun -np <number of processes> <program name and arguments>
.fi


If mpirun cannot determine what kind of machine you are on, and it
is supported by the mpi implementation, you can the -machine
and -arch options to tell it what kind of machine you are running
on. The current valid values for machine are

.nf
chameleon (including chameleon/pvm, chameleon/p4, etc...)
meiko     (the meiko device on the meiko)
paragon   (the ch_nx device on a paragon not running NQS)
p4        (the ch_p4 device on a workstation cluster)
ibmspx    (ch_eui for IBM SP2)
anlspx    (ch_eui for ANLs SPx)
ksr       (ch_p4 for KSR 1 and 2)
sgi_mp    (ch_shmem for SGI multiprocessors)
cray_t3d  (t3d for Cray T3D)
smp       (ch_shmem for SMPs)
execer    (a custom script for starting ch_p4 programs
without using a procgroup file. This script
currently does not work well with interactive
jobs)
.fi

You should only have to specify mr_arch if mpirun does not recognize
your machine, the default value is wrong, or you are using the p4 or
execer devices.  The full list of options is

.SH PARAMETERS
The options for mpirun must come before the program you want to run and
must be spelled out completely (no abreviations).  Unrecognized options
will be silently ignored.

mpirun [mpirun_options...] <progname> [options...]

.PD 0
.TP
.B -arch <architecture> 
- 
specify the architecture (must have matching machines.<arch>
file in ${MPIR_HOME}/util/machines) if using the execer
.PD 1
.PD 0
.TP
.B -h      
- This help
.PD 1
.PD 0
.TP
.B -machine <machine name> 
- 
use startup procedure for <machine name>
.PD 1
.PD 0
.TP
.B -machinefile <machine-file name> 
- 
Take the list of possible machines to run on from the
file <machine-file name>
.PD 1
.PD 0
.TP
.B -np <np> 
- 
specify the number of processors to run on
.PD 1
.PD 0
.TP
.B -nolocal 
- 
do not run on the local machine (only works for 
p4 and ch_p4 jobs)
.PD 1
.PD 0
.TP
.B -stdin filename 
- 
Use filename as the standard input for the program.  This
is needed for programs that must be run as batch jobs, such
as some IBM SP systems and Intel Paragons using NQS (see 
-paragontype below).
.PD 1
.PD 0
.TP
.B -t      
- Testing - do not actually run, just print what would be
executed
.PD 1
.PD 0
.TP
.B -v      
- Verbose - throw in some comments
.PD 1
.PD 0
.TP
.B -dbx    
- Start the first process under dbx where possible
.PD 1
.PD 0
.TP
.B -gdb    
- Start the first process under gdb where possible
(on the Meiko, selecting either -dbx or -gdb starts prun
under totalview instead)
.PD 1
.PD 0
.TP
.B -xxgdb  
- Start the first process under xxgdb where possible (-xdbx
does not work)
.PD 1
.PD 0
.TP
.B -tv     
- Start under totalview
.PD 1

.SH SPECIAL OPTIONS FOR NEC - CENJU-3

.PD 0
.TP
.B -batch  
- Excecute program as a batch job (using cjbr)
.PD 1

.PD 0
.TP
.B -stdout filename 
- 
Use filename as the standard output for the program.
.PD 1
.PD 0
.TP
.B -stderr filename 
- 
Use filename as the standard error  for the program.
.PD 1

.SH SPECIAL OPTIONS FOR NEXUS DEVICE

.PD 0
.TP
.B -nexuspg filename 
- 
Use the given Nexus startup file instead of creating one.
Overrides -np and -nolocal, selects -leave_pg.
.PD 1
.PD 0
.TP
.B -nexusdb filename 
- 
Use the given Nexus resource database.
.PD 1

.SH SPECIAL OPTIONS FOR WORKSTATION CLUSTERS


.PD 0
.TP
.B -e     
- Use execer to start the program on workstation
clusters
.PD 1
.PD 0
.TP
.B -pg    
- Use a procgroup file to start the p4 programs, not execer
(default)
.PD 1
.PD 0
.TP
.B -leave_pg 
- 
Do not delete the P4 procgroup file after running
.PD 1
.PD 0
.TP
.B -p4pg filename 
- 
Use the given p4 procgroup file instead of creating one.
Overrides -np and -nolocal, selects -leave_pg.
.PD 1
.PD 0
.TP
.B -tcppg filename 
- 
Use the given tcp procgroup file instead of creating one.
Overrides -np and -nolocal, selects -leave_pg.
.PD 1
.PD 0
.TP
.B -p4ssport num 
- 
Use the p4 secure server with port number num to start the
programs.  If num is 0, use the value of the 
environment variable MPI_P4SSPORT.  Using the server can
speed up process startup.  If MPI_USEP4SSPORT as well as
MPI_P4SSPORT are set, then that has the effect of giving
mpirun the -p4ssport 0 parameters.
.PD 1

.SH SPECIAL OPTIONS FOR BATCH ENVIRONMENTS

.PD 0
.TP
.B -mvhome 
- Move the executable to the home directory.  This 
is needed when all file systems are not cross-mounted.
Currently only used by anlspx
.PD 1
.PD 0
.TP
.B -mvback files 
- 
Move the indicated files back to the current directory.
Needed only when using -mvhome; has no effect otherwise.
.PD 1
.PD 0
.TP
.B -maxtime min 
- 
Maximum job run time in minutes.  Currently used only
by anlspx.  Default value is 15 minutes
.PD 1
.PD 0
.TP
.B -nopoll 
- Do not use a polling-mode communication.
Available only on IBM SPx.
.PD 1
.PD 0
.TP
.B -mem value 
- 
This is the per node memory request (in Mbytes).  Needed for some
CM-5s.
.PD 1
.PD 0
.TP
.B -cpu time 
- 
This is the the hard cpu limit used for some CM-5s in
minutes.
.PD 1

.SH SPECIAL OPTIONS FOR IBM SP2

.PD 0
.TP
.B -cac name 
- 
CAC for ANL scheduler.  Currently used only by anlspx.
If not provided will choose some valid CAC.
.PD 1

.SH SPECIAL OPTIONS FOR INTEL PARAGON

.PD 0
.TP
.B -paragontype name 
- 
Selects one of default, mkpart, NQS, depending on how you want
to submit jobs to a Paragon.
.PD 1

.PD 0
.TP
.B -paragonname name 
- 
Remote shells to name to run the job (using the -sz method) on 
a Paragon.
.PD 1

.PD 0
.TP
.B -paragonpn name 
- 
Name of partition to run on in a Paragon (using the -pn name 
command-line argument)
.PD 1

.SH RETURN VALUE

On exit, mpirun returns a status of zero unless mpirun detected a problem, in
which case it returns a non-zero status (currently, all are one, but this
may change in the future).

.SH SPECIFYING HETEROGENEOUS SYSTEMS

Multiple architectures may be handled by giving multiple 
.I -arch
and 
.I -np
arguments.  For example, to run a program on 2 sun4s and 3 rs6000s, with
the local machine being a sun4, use
.nf
mpirun -arch sun4 -np 2 -arch rs6000 -np 3 program
.fi

This assumes that program will run on both architectures.  If different
executables are needed (as in this case), the string 
.I %a
will be replaced
with the arch name. For example, if the programs are 
.I program.sun4
and
.I program.rs6000
, then the command is
.nf
mpirun -arch sun4 -np 2 -arch rs6000 -np 3 program.%a
.fi

If instead the execuables are in different directories; for example,
.I /tmp/me/sun4
and 
.I /tmp/me/rs6000
, then the command is
.nf
mpirun -arch sun4 -np 2 -arch rs6000 -np 3 /tmp/me/%a/program
.fi

It is important to specify the architecture with 
.I -arch
.B before
specifying
the number of processors.  Also, the 
.B first
.I -arch
command must refer to the
processor on which the job will be started.  Specifically, if 
.I -nolocal
is
.B not
specified, then the first -arch must refer to the processor from which
mpirun is running.

(You must have 
.I machines.<arch>
files for each arch that you use in the
.I util/machines
directory.)

Another approach that may be used the the 
.I ch_p4
device is to create a
.I procgroup
file directly.  See the MPICH Users Guide for more information.

.SH LOCATION
/home/MPI/mansrc/commands
