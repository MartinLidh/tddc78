#
#  $Id: Makefile.in,v 1.16 1999/11/24 15:18:13 swider Exp $
#
#  (C) 1993,1995 by Argonne National Laboratory and Mississipi State University.
#      All rights reserved.  See COPYRIGHT in top-level directory.
#
# Eventually, there will be two sets of routines
#
#
##### User configurable options #####

CC          = @CC@
AR          = @AR@
RANLIB      = @RANLIB@
OPTFLAGS    = @OPTFLAGS@
SHELL       = /bin/sh
ASMFILES_O  = @ASMFILES_O@
prefix      = @prefix@
top_srcdir  = @top_srcdir@
srcdir      = @srcdir@
libbuild_dir = @libbuild_dir@
### End User configurable options ###

@VPATH@

#ALL: default
ALL: libdev

LIBNAME  = ${libbuild_dir}/lib@MPILIBNAME@.a
LIBDEV   = libmpid.a
CFLAGS   = @CFLAGS@ $(OPTFLAGS) @OPTFLAGSC@ \
	   	-I${top_srcdir}/mpid/ch2 -I${top_srcdir}/mpid/util \
	   	-I${top_srcdir}/include -I. -I${srcdir} \
		-I${top_srcdir}/mpid/util @mpich_includes@ \
		-DHAVE_MPICH_MPID_H \
		-DMPID_DEVICE_CODE @GETNAME_DEFS@ @DEVCFLAGS@ @DEV_DEFS@
# See mpid/ch_adi2/Makefile.in for a full list
# chtime.c is used if MPID_TB2_TIMER is not defined.
SOURCE   = adi2recv.c adi2send.c adi2init.c adi2probe.c adi2ssend.c \
	   adi2hsend.c adi2hrecv.c adi2hssend.c adi2pack.c adi2mpack.c \
	   adi2req.c adi2cancel.c \
	   chbeager.c chneager.c chnrndv.c chdebug.c chchkdev.c chshort.c \
	   chinit.c chnodename.c chtick.c mplpriv.c queue.c cmnargs.c \
	   mprerr.c tr2.c sbcnst2.c chtime.c chpackflow.c chcancel.c\
	   chflow.c @DEVCFILES@
SOURCEC  = $(SOURCE)
SOURCEF  =
MPI_OBJECTS = adi2recv.o adi2send.o adi2init.o adi2probe.o adi2ssend.o \
	      adi2hsend.o adi2hrecv.o adi2hssend.o adi2pack.o adi2mpack.o \
	      adi2req.o adi2cancel.o \
	      chbeager.o chneager.o chnrndv.o chdebug.o chchkdev.o chshort.o \
	      chinit.o chnodename.o chtick.o mplpriv.o queue.o cmnargs.o \
	      tr2.o sbcnst2.o chtime.o chpackflow.o chflow.o chcancel.o \
	      $(ASMFILES_O) gclock.o read_clock.o @DEVOFILES@

default: $(LIBNAME) spxcp
libdev: $(LIBDEV)

$(SOURCE): mpid.h chdef.h

# default_all is the same as default, but without the RANLIB.  This
# can speed up the build (ranlibs can take a LONG time).  profile_all 
# is the same, but for the profile library
default_all: setlinks default_files
default_files: $(MPI_OBJECTS)
	$(AR) $(LIBNAME) $?
profile_all: 

distclean:
	@for file in ${SOURCE} ; do  \
	    if [ -h $$file ] ; then \
	        /bin/rm -f $$file ; fi \
	done
	@for file in ${MPIDHEADERS} ; do \
	    if [ -h $$file ] ; then \
	        /bin/rm -f $$file ; fi \
	done
	@if [ -h mpiddev.h ] ; then \
	    /bin/rm -f mpiddev.h ; fi

clean:
	/bin/rm -f *~ $(MPI_OBJECTS) libmpid.a mprerr.o

read_clock.o: ${srcdir}/read_clock.sav
	cp ${srcdir}/read_clock.sav read_clock.o
#
# Some IBM implemenations of make are INCORRECT and fail to use the following
# rule to override the default rules (and looks for a gclock.c).
# If you have this problem, just execute this copy and file a bug report with
# IBM.
#
gclock.o: ${srcdir}/gclock.sav
	cp ${srcdir}/gclock.sav gclock.o

MPIDHEADERS = mpid.h req.h comm.h datatype.h chhetero.h attach.h objtrace.h \
	      calltrace.h cookie.h mpid_bind.h reqalloc.h tr2.h mpimem.h \
	      sbcnst2.h chpackflow.h
setlinks:
	@for file in $(SOURCE) ; do  \
	    if [ ! -s $$file -a -s ${top_srcdir}/mpid/ch2/$$file ] ; then \
	 	ln -s ${top_srcdir}/mpid/ch2/$$file $$file ; fi ; \
	    if [ ! -s $$file -a -s ${top_srcdir}/mpid/util/$$file ] ; then \
		ln -s ${top_srcdir}/mpid/util/$$file $$file ; fi ; \
	done
	@for file in $(MPIDHEADERS) ; do \
	    if [ ! -s $$file -a -s ${top_srcdir}/mpid/ch2/$$file ] ; then \
		ln -s ${top_srcdir}/mpid/ch2/$$file $$file ; \
	    elif [ ! -s $$file -a -s ${top_srcdir}/mpid/util/$$file ] ; then \
		ln -s ${top_srcdir}/mpid/util/$$file $$file ; fi ; \
	done
	@if [ ! -s mpiddev.h ] ; then \
	    ln -s ${top_srcdir}/mpid/ch2/mpiddevbase.h mpiddev.h ; fi

.c.o:
	$(CC) $(CFLAGS) $(BASEOPT) -c $< $(MPI_PROFILE)

#.c.s:
#	$(CC) $(CFLAGS) $(BASEOPT) -c -S $< $(MPI_PROFILE)

configure: configure.in
	autoheader --localdir=../..
	autoconf   --localdir=../..

${libbuild_dir}/lib@MPILIBNAME@.a: $(MPI_OBJECTS) 
	$(AR) $@ $?
	$(RANLIB) $@

libmpid.a: $(MPI_OBJECTS) mprerr.o
	$(AR) $@ $?
	$(RANLIB) $@

#
# spxcp is an IBM SP-specific program to copy executables using the
# underlying SP message-passing code.  This is needed because POE doesn't
# do this.  If for some reason this fails to compile, there is nothing lost;
# the mpirun code uses it ONLY if it is available.
#
spxcp: ${srcdir}/spxcp.c
	-mpcc -o spxcp ${srcdir}/spxcp.c
	-cp spxcp ${binbuild_dir}
