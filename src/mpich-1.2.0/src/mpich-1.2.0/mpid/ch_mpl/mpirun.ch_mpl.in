#! /bin/sh
exitstatus=1
if [ "$MPIR_HOME" = "" ] ; then 
    MPIR_HOME=#MPIR_HOME#
fi
if [ "$MPIR_HOME" = "#""MPIR_HOME""#" ] ; then
    MPIR_HOME=`pwd`/..
fi
if [ "#MPIRUN_BIN#" = "#""MPIRUN_BIN""#" ] ; then 
    MPIRUN_HOME=$MPIR_HOME/bin
else
    MPIRUN_HOME=#MPIRUN_BIN#
fi
if [ "$argsset" = "" ] ; then
   . $MPIRUN_HOME/mpirun.args
   argsset=1
fi
# This only works on SPx running release 2 software and with
# the high-performance switch.  Note that we need to parameterize
# the hostlist somehow.
# use 
#   MP_EUILIB ip 
# for ip over the switch
# Other variables to consider:
# MP_PMDLOG yes
# PWD $PWD_TRIAL
# MP_INFOLEVEL 1 
# MP_INFOLEVEL 20
# MP_CSS_INTERRUPT ?
# MP_PULSE must be 0 to get performance (some problem with defaults
# in GA code)
# setenv MP_PULSE 0
# The retry/retrycount tries every 15 seconds for 10 minutes to get some
# nodes.
# Note that if the executable is not on a file system mounted 
# on a node, you may get a strange error message.
#
# The MP_RMPOOL value may need to be changed or even unset, depending on your
# environment.
#
# The IBM pedb debugger is also available (replace poe with pedb)
#
if [ -z "$MP_RETRY" ] ; then
    MP_RETRY=15
fi
if [ -z "$MP_RETRYCOUNT" ] ; then
    MP_RETRYCOUNT=40
fi
# Don't set a default for the RMPOOL
#if [ -z "$MP_RMPOOL" ] ; then
#    MP_RMPOOL=0
#fi
if [ -z "$MP_EUILIB" ] ; then
    if [ -d /usr/lpp/ppe.poe/lib/ip -a ! -d /usr/lpp/ppe.poe/lib/us ] ; then
        MP_EUILIB=ip
    else
        MP_EUILIB=us
    fi
fi
# Set default machinefile
if [ -z "$machineFile" -a -n "$MP_HOSTFILE" ] ; then
    machineFile="$MP_HOSTFILE"
fi
# Handle Totalview debugging
if [ "$debugger" = "totalview" ] ; then
    if [ "$TOTALVIEW" = "" ] ; then
        TOTALVIEW="totalview"
    fi
    startpgm="$TOTALVIEW poe -a"
    debugargs="-mpichksq"
elif [ "$debugger" = "pedb" ] ; then
    startpgm="pedb"
    debugargs=""
else
    startpgm="poe"
    debugargs=""
fi

if [ $just_testing = 1 ] ; then
    echo "(sh/ksh style:)"
    echo MP_EUILIB=$MP_EUILIB
    echo export MP_EUILIB
    if [ -n "$MP_RMPOOL" ] ; then
        echo MP_RMPOOL=$MP_RMPOOL
        echo export MP_RMPOOL
    fi
    echo MP_HOSTFILE=$machineFile
    echo export MP_HOSTFILE
    echo MP_PROCS=$np
    echo export MP_PROCS
    echo MP_INFOLEVEL=0
    echo export MP_INFOLEVEL
    echo MP_PULSE=0
    echo export MP_PULSE
    echo MP_RETRY=$MP_RETRY
    echo export MP_RETRY
    echo MP_RETRYCOUNT=$MP_RETRYCOUNT
    echo export MP_RETRYCOUNT
    if [ $polling_mode = 0 ] ; then
        echo MP_CSS_INTERRUPT=yes
	echo export MP_CSS_INTERRUPT
    fi
    echo $startpgm $progname $cmdLineArgs $debugargs
else
    MP_EUILIB=$MP_EUILIB
    export MP_EUILIB
    if [ -n "$MP_RMPOOL" ] ; then 
        MP_RMPOOL=$MP_RMPOOL
        export MP_RMPOOL
    fi
    MP_HOSTFILE=$machineFile
    export MP_HOSTFILE
    MP_PROCS=$np
    export MP_PROCS
    if [ -n "$nodes" ] ; then
      MP_NODES=$nodes
      export MP_NODES
    elif [ -n "$MP_TASKS_PER_NODE" ] ; then 
        MP_TASKS_PER_NODE=$MP_TASKS_PER_NODE
        export MP_TASKS_PER_NODE
    else
      if [ -n "$MP_NODES" ] ; then
        MP_NODES=$MP_NODES
      else
        MY_TEMP=`expr $np / 4`
        MY_TEMP2=`expr $MY_TEMP \* 4`
        if [ $MY_TEMP2 = $np ] ; then
          MP_NODES=$MY_TEMP
        else
          MP_NODES=`expr $MY_TEMP + 1`
        fi
      fi
      export MP_NODES
    fi

    MP_INFOLEVEL=0
    export MP_INFOLEVEL
    MP_PULSE=0
    export MP_PULSE
    MP_RETRY=$MP_RETRY
    export MP_RETRY
    MP_RETRYCOUNT=$MP_RETRYCOUNT
    export MP_RETRYCOUNT
    if [ $polling_mode = 0 ] ; then
        MP_CSS_INTERRUPT=yes
	export MP_CSS_INTERRUPT
    fi
    $startpgm $progname $cmdLineArgs $debugargs
    exitstatus=$?
fi

