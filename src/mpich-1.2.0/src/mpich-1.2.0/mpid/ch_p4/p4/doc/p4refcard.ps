%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 5 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "3" 3
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 16 Q
0 X
0 K
(P4 QUICK REFERENCE) 217.43 763.29 T
1 14 Q
(Fortran Library) 99 746.46 T
(Function Description) 403.46 746.46 T
1 7 Q
(Steve Slater) 21.02 13.23 T
(, UC Berkeley) 54.32 13.23 T
1 9 Q
(call p4init\050\051) 21.6 721.9 T
(call p4crpg\050\051) 21.6 710.9 T
(int = p4myid\050\051) 21.6 699.9 T
(int = p4ntotids\050\051) 21.6 688.9 T
(int = p4nslaves\050\051) 21.6 677.9 T
(call p4cleanup\050\051) 21.6 666.9 T
(int = p4myclid\050\051) 21.6 633.9 T
(int = p4nclids\050\051) 21.6 622.9 T
(call p4getclids\050istart,iend\051) 21.6 611.9 T
(call p4send\050itype,idest,msg,len.irc\051) 21.6 578.9 T
(call p4sendr\050itype,idest,msg,len,irc\051) 21.6 567.9 T
(call p4sendx\050itype,idest,msg,len,data_type,irc\051) 21.6 556.9 T
(call p4sendrx\050itype,idest,msg,len,data_type,irc\051) 21.6 545.9 T
(call p4probe\050itype,ifrom.irc\051) 21.6 534.9 T
(call p4recv\050itype,ifrom,buf,ibu\337en,msglen,irc\051) 21.6 523.9 T
(call p4brdcst\050itype,data,ilen,irc\051) 21.6 490.9 T
(call p4brdcstx\050itype,data,ilen,idata_type,irc\051) 21.6 479.9 T
(call p4globarr\050itype\051) 21.6 468.9 T
(call p4globop\050itype,x,nelem,isize,op,idata_type,irc\051) 21.6 457.9 T
(where op is one of:) 35.1 446.9 T
(p4\050int/dbl/\337t\051absmaxop\050\051) 53.75 435.9 T
(p4\050int/dbl/\337t\051absminop\050\051) 53.75 424.9 T
(p4\050int/dbl/\337t\051maxop\050\051) 53.75 413.9 T
(p4\050int/dbl/\337t\051minop\050\051) 53.75 402.9 T
(p4\050int/dbl/\337t\051multop\050\051) 53.75 391.9 T
(p4\050int/dbl/\337t\051sumop\050\051) 53.75 380.9 T
(int = p4clock\050\051) 21.6 347.9 T
(int = p4ustimer\050\051) 21.6 336.9 T
(call p4error\050str) 21.6 303.9 T
(,ival\051) 74.89 303.9 T
(call p4softerrs\050new) 21.6 292.9 T
(,iold\051) 90.15 292.9 T
(call p4\337ush\050\051) 21.6 281.9 T
(call p4version\050\051) 21.6 248.9 T
(call p4getclmasts\050numids,ids\051) 21.6 237.9 T
(call p4avlbufs\050\051) 21.6 226.9 T
(call p4setavlbuf\050idx,isize\051) 21.6 215.9 T
(Initialize p4 environment) 309.6 721.9 T
(Create \322p4-managed processes\323) 309.6 710.9 T
(Returns unique process id integer) 309.6 699.9 T
(Returns integer value for total # of ids) 309.6 688.9 T
(Returns integer value for total # of processes) 309.6 677.9 T
(T) 309.6 666.9 T
(ermination/cleanup process for end of program) 314.46 666.9 T
(Returns integer cluster id) 309.6 633.9 T
(Returns integer number of ids in cluster) 309.6 622.9 T
(Istart and iend contain p4 ids of the \336rst and last ids within the current cluster) 309.6 611.9 T
(.) 587.44 611.9 T
(Send and return immediately) 309.6 578.9 T
(Send and wait for acknowledgment \050rendezvous\051) 309.6 567.9 T
(Send and use XDR for data conversion) 309.6 556.9 T
(Send and wait with XDR) 309.6 545.9 T
(Indicate if message of req_type are available from process req_from) 309.6 534.9 T
(Receive message of itype from ifrom into buf) 309.6 523.9 T
(Broadcast messages to all processes) 309.6 490.9 T
(Broadcast messages with XDR conversion) 309.6 479.9 T
(Causes invoking process to hang until all processes have executed barrier) 309.6 468.9 T
(Perform the same operation on all processes) 309.6 457.9 T
(absmax of data pointed to by x) 309.6 435.9 T
(absmin of data pointed to by x) 309.6 424.9 T
(max of data pointed to by x) 309.6 413.9 T
(min of data pointed to by x) 309.6 402.9 T
(commutative multiplication of data pointed to by x) 309.6 391.9 T
(commutative summation of data pointed to by x) 309.6 380.9 T
(Returns wall-clock value in milliseconds, usually via gettimeofday) 309.6 347.9 T
(Returns wall-clock value in microseconds) 309.6 336.9 T
(Prints string then forcefully terminates all co-operating processes) 309.6 303.9 T
(Enables/disables soft errors, default is disabled) 309.6 292.9 T
(Forces printing of standard output \050calls f) 309.6 281.9 T
(\337ush\050stdout\051\051) 458.71 281.9 T
(Prints the version number of p4 being run to stdout) 309.6 248.9 T
(Returns number of cluster masters in numids and their p4-ids in ids[]) 309.6 237.9 T
(Prints contents of the buf) 309.6 226.9 T
(fer pools) 399.81 226.9 T
(Sets the size of buf) 309.6 215.9 T
(fers in p4\325) 377.83 215.9 T
(s buf) 414.28 215.9 T
(fer pools) 431.84 215.9 T
18 22.5 594 742.5 R
0.5 H
2 Z
N
18 729 594 729 2 L
N
18 657 594 657 2 L
N
18 643.5 594 643.5 2 L
N
18 603 594 603 2 L
N
18 589.5 594 589.5 2 L
N
18 499.5 594 499.5 2 L
N
18 513 594 513 2 L
N
18 369 594 369 2 L
N
18 355.5 594 355.5 2 L
N
18 328.5 594 328.5 2 L
N
18 315 594 315 2 L
N
18 274.5 594 274.5 2 L
N
18 261 594 261 2 L
N
0 F
(PROCESS MANAGEMENT) 250.57 733.72 T
(CLUSTER MANAGEMENT) 249.17 647.83 T
(MESSAGE P) 264.17 593.67 T
(ASSING) 315.19 593.67 T
(GLOBAL OPERA) 256.67 503.67 T
(TIONS) 328.16 503.67 T
(TIMING FUNCTIONS) 259.17 359.5 T
(DEBUGGING FUNCTIONS) 249.17 319.5 T
(MISCELLANEOUS FUNCTIONS) 237.5 264.5 T
FMENDPAGE
%%EndPage: "3" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
0 16 Q
0 X
0 K
(P4 QUICK REFERENCE) 217.43 763.29 T
1 14 Q
(Shared Memory Library) 84.5 746.46 T
(Function Description) 403.46 746.46 T
1 7 Q
(Steve Slater) 21.02 13.23 T
(, UC Berkeley) 54.32 13.23 T
1 9 Q
(char *p4_malloc\050int n\051) 21.6 710 T
(VOID p4_free\050char *p\051) 21.6 699 T
(char *p4_shmalloc\050int n\051) 21.6 688 T
(VOID p4_shfree\050\051) 21.6 677 T
(int p4_moninit\050p4_monitor_t *m,int i\051) 21.6 644 T
(VOID p4_menter\050p4_monitor_t *m\051) 21.6 633 T
(VOID p4_mexit\050p4_monitor_t *m\051) 21.6 622 T
(VOID p4_mcontinue\050p4_monitor_t *m,int i\051) 21.6 611 T
(VOID p4_mdelay\050p4_monitor_t *m,int i\051) 21.6 600 T
(VOID p4_lock_init\050p4_lock_t *l\051) 21.6 567 T
(VOID p4_lock\050p4_lock_t *l\051) 21.6 556 T
(VOID p4_unlock\050p4_lock_t *l\051) 21.6 545 T
(VOID p4_getsub\050p4_getsub_monitor_t *gs, int *s,int max,int nprocs\051) 21.6 534 T
(VOID p4_getsubs\050p4_getsub_monitor_t *gs, int *s,int max,int nprocs,int) 21.6 523 T
(stride\051) 36 512 T
(int p4_getsub_init\050p4_getsub_monitor_t *gs\051) 21.6 501 T
(VOID p4_barrier\050p4_barrier_monitor_t *b,int nprocs\051) 21.6 490 T
(int p4_barrier_init\050p4_barrier_monitor_t *b\051) 21.6 479 T
(int p4_askfor\050p4_askfor_monitor_t *af,int nprocs,int \050*getprob_fxn\051\050\051,VOID) 21.6 468 T
(*problem,int \050*reset_fxn\051\050\051\051) 36 457 T
-0.07 (int p4_update\050p4_askfor_monitor_t *af,int \050*putprob_fxn\051\050\051,VOID *problem\051) 21.6 446 P
(int p4_askfor_init\050p4_askfor_monitor_t *af\051) 21.6 435 T
(VOID p4_probend\050p4_askfor_monitor_t *af,int code\051) 21.6 424 T
(VOID p4_progend\050p4_askfor_monitor_t *af\051) 21.6 413 T
(Acts like malloc) 309.6 710 T
(Acts like free) 309.6 699 T
(Acts like malloc except obtains shared memory locations) 309.6 688 T
(Frees shared memory obtained from p4_shmalloc) 309.6 677 T
(Initialize the monitor pointed to by m and gives it i queues for processes) 309.6 644 T
(Enter the monitor pointed to by m) 309.6 633 T
(Exit the monitor pointed to by m) 309.6 622 T
(Check for processes blocked on ith queue of m and release one of them) 309.6 611 T
(Permits a process to delay itself on the ith queue of monitor m) 309.6 600 T
(Initializes the lock to l) 309.6 567 T
(Blocks if the lock l is already locked, otherwise locks l and proceeds) 309.6 556 T
(Unlocks the lock l) 309.6 545 T
(Obtains the next value of a shared counter and increments counter by one) 309.6 534 T
(Like p4_getsub but increases counter by stride) 309.6 523 T
(Initializes the getsub monitor pointed to by gs) 309.6 501 T
(Causes the executing process to hand until nprocs processes invoke barrier) 309.6 490 T
(Initializes the barrier monitor b) 309.6 479 T
(Acts like a general dispatcher of work. Requests a new \322problem\323 to work on) 309.6 468 T
(from the problem pool.) 309.6 457 T
(Updates the problem pool being managed by the askfor monitor af) 309.6 446 T
(Initializes the askfor monitor af) 309.6 435 T
(Allows the user process to mark a problem as solved early) 309.6 424 T
(Allows a process to cause a return code of \050-1\051 to all processes using af) 309.6 413 T
0 F
(MEMOR) 247.5 727.48 T
(Y MANAGEMENT) 283.63 727.48 T
18 22.5 594 738 R
0.5 H
2 Z
N
18 724.5 594 724.5 2 L
N
18 670.5 594 670.5 2 L
N
18 657 594 657 2 L
N
18 594 594 594 2 L
N
18 580.5 594 580.5 2 L
N
(MONIT) 232.14 661.24 T
(OR BUILDING PRIMITIVES) 263.44 661.24 T
(SOME USEFUL MONIT) 245.71 584.14 T
(ORS) 343.43 584.14 T
FMENDPAGE
%%EndPage: "2" 1
%%Page: "1" 1
612 792 0 FMBEGINPAGE
0 16 Q
0 X
0 K
(P4 QUICK REFERENCE) 217.43 763.29 T
1 14 Q
(C Library) 126 746.46 T
(Function Description) 403.46 746.46 T
1 7 Q
(Steve Slater) 22.5 13.23 T
(, UC Berkeley) 55.8 13.23 T
1 9 Q
(int p4_initenv\050int *ar) 21.6 721 T
(gc, char **ar) 97.83 721 T
(gv\051) 144.33 721 T
(int p4_create\050int \050*fxn\051 \050\051\051) 21.6 710 T
(int p4_create_procgroup\050\051) 21.6 699 T
(int p4_get_my_id\050\051) 21.6 688 T
(int p4_num_total_ids\050\051) 21.6 677 T
(int p4_num_total_slaves\050\051) 21.6 666 T
(VOID p4_wait_for_end\050\051) 21.6 655 T
(BOOL p4_am_i_cluster_master\050\051) 21.6 622 T
(int p4_get_my_cluster_id\050\051) 21.6 611 T
(int p4_num_cluster_ids\050\051) 21.6 600 T
(VOID p4_get_cluster_ids\050int *start,int *end\051) 21.6 589 T
(p4_send\050int type,int to,char *msg,int len\051) 21.6 556 T
(p4_sendr\050int type,int to,char *msg,int len\051) 21.6 545 T
(p4_sendx\050int type,int to,char *msg,int len,datatype\051) 21.6 534 T
(p4_sendrx\050int type,int to,char *msg,int len,datatype\051) 21.6 523 T
(p4_sendb\050int type,int to,char *msg,int len\051) 21.6 512 T
(p4_sendbr\050int type,int to,char *msg,int len\051) 21.6 501 T
(p4_sendbx\050int type,int to,char *msg,int len,datatype\051) 21.6 490 T
(p4_sendbrx\050int type,int to,char *msg,int len,datatype\051) 21.6 479 T
(datatype = P4INT) 35.1 468 T
(, P4LNG, P4FL) 98.91 468 T
(T) 155.01 468 T
(, or P4DBL) 159.84 468 T
(BOOL p4_messages_available\050int *req_type, int *req_from\051) 21.6 446 T
(int p4_recv\050int *req_type, int *req_from, char **msg, int *len_rcvd\051) 21.6 435 T
(char *p4_msg_alloc\050int len\051) 21.6 424 T
(VOID p4_msg_free\050char *m\051) 21.6 413 T
(p4_broadcast\050int type, char *data, int data_len\051) 21.6 380 T
(p4_broadcastx\050int type, char *data, int data_len, int data_type\051) 21.6 369 T
(p4_global_barrier\050int type\051) 21.6 358 T
(p4_global_op\050int type, char *x, int size, int nelem, op, int data_type\051) 21.6 347 T
(where op is one of:) 35.1 336 T
(p4_\050int/dbl/\337t\051_absmax_op\050\051) 53.75 325 T
(p4_\050int/dbl/\337t\051_absmin_op\050\051) 53.75 314 T
(p4_\050int/dbl/\337t\051_max_op\050\051) 53.75 303 T
(p4_\050int/dbl/\337t\051_min_op\050\051) 53.75 292 T
(p4_\050int/dbl/\337t\051_mult_op\050\051) 53.75 281 T
(p4_\050int/dbl/\337t\051_sum_op\050\051) 53.75 270 T
(int p4_clock\050\051) 21.6 237 T
(p4_usc_time_t p4_ustimer\050\051) 21.6 226 T
(p4_usc_time_t p4_usrollover\050\051) 21.6 215 T
(p4_usc_time_t is de\336ned as an unsigned long int) 35.1 204 T
(int p4_get_dbg_level\050\051) 21.6 171 T
(VOID p4_set_dbg_level\050int level\051) 21.6 160 T
(VOID p4_dprintf\050char *fmt, va_alist\051) 21.6 149 T
(VOID p4_dprint\337\050int level, char *fmt, va_alist\051) 21.6 138 T
(VOID p4_error\050char *string, int value\051) 21.6 127 T
(VOID p4_soft_errors\050int onof) 21.6 116 T
(f\051) 129.76 116 T
(char *p4_version\050\051) 21.6 83 T
(VOID p4_get_cluster_masters\050int *numids, int ids[]\051) 21.6 72 T
(VOID p4_print_avail_buf) 21.6 61 T
(fers\050\051) 115.04 61 T
(VOID p4_set_avail_buf) 21.6 50 T
(f\050int bu\336dx, int size\051) 108.05 50 T
(Initialize p4 environment) 309.6 721 T
(Create \322user) 309.6 710 T
(-managed\323 p4 processes) 354.09 710 T
(Create \322p4-managed processes\323) 309.6 699 T
(Returns unique process id integer) 309.6 688 T
(Returns integer value for total # of ids) 309.6 677 T
(Returns integer value for total # of processes) 309.6 666 T
(T) 309.6 655 T
(ermination/cleanup process for end of program) 314.46 655 T
(Determine if process is \322cluster master\323) 309.6 622 T
(Returns integer cluster id) 309.6 611 T
(Returns integer number of ids in cluster) 309.6 600 T
(Start and End contain p4 ids of the \336rst and last ids within the current cluster) 309.6 589 T
(.) 584.95 589 T
(Send and return immediately) 309.6 556 T
(Send and wait for acknowledgment \050rendezvous\051) 309.6 545 T
(Send and use XDR for data conversion) 309.6 534 T
(Send and wait with XDR) 309.6 523 T
(Send using msg in buf) 309.6 512 T
(fer created by p4_msg_alloc\050\051) 389.83 512 T
(Send with buf) 309.6 501 T
(fer and acknowledgment) 359.87 501 T
(Send with buf) 309.6 490 T
(fer and XDR) 359.87 490 T
(Send with buf) 309.6 479 T
(fer) 359.87 479 T
(, acknowledgment, and XDR.) 369.48 479 T
(Indicate if message of req_type are available from process req_from) 309.6 446 T
(Receive message of req_type from req_from into **msg \050allocates if NULL\051) 309.6 435 T
(Returns pointer to buf) 309.6 424 T
(fer area used to receive message of len bytes) 388.57 424 T
(Frees message pointed to by m) 309.6 413 T
(Broadcast messages to all processes) 309.6 380 T
(Broadcast messages with XDR conversion) 309.6 369 T
(Causes invoking process to hang until all processes have executed barrier) 309.6 358 T
(Perform the same operation on all processes) 309.6 347 T
(absmax of data pointed to by x) 309.6 325 T
(absmin of data pointed to by x) 309.6 314 T
(max of data pointed to by x) 309.6 303 T
(min of data pointed to by x) 309.6 292 T
(commutative multiplication of data pointed to by x) 309.6 281 T
(commutative summation of data pointed to by x) 309.6 270 T
(Returns wall-clock value in milliseconds, usually via gettimeofday) 309.6 237 T
(Returns wall-clock value in microseconds) 309.6 226 T
(Returns the timer value at which microsecond timer \322rolls over\323) 309.6 215 T
(Returns current debug level) 309.6 171 T
(Sets current debug level for this process and its cluster) 309.6 160 T
(Printf preceded by value that identi\336es the process) 309.6 149 T
(Like dprintf but debug level must by higher than level to print) 309.6 138 T
(Prints string then forcefully terminates all co-operating processes) 309.6 127 T
(Enables/disables soft errors, default is disabled) 309.6 116 T
(Returns string containing the version number of p4 being run) 309.6 83 T
(Returns number of cluster masters in numids and their p4-ids in ids[]) 309.6 72 T
(Prints contents of the buf) 309.6 61 T
(fer pools) 399.81 61 T
(Sets the size of buf) 309.6 50 T
(fers in p4\325) 377.83 50 T
(s buf) 414.28 50 T
(fer pools) 431.84 50 T
18 22.5 598.5 742.5 R
0.5 H
2 Z
N
0 F
(PROCESS MANAGEMENT) 249.12 733.41 T
18 729.11 598.5 729.11 2 L
N
(CLUSTER MANAGEMENT) 249.86 638.16 T
18 648 598.5 648 2 L
N
18 634.5 598.5 634.5 2 L
N
18 585 598.5 585 2 L
N
18 571.5 598.5 571.5 2 L
N
(MESSAGE P) 263.29 574.57 T
(ASSING) 314.31 574.57 T
18 405 598.5 405 2 L
N
18 391.5 598.5 391.5 2 L
N
(GLOBAL OPERA) 256.43 394.86 T
(TIONS) 327.92 394.86 T
18 261 598.5 261 2 L
N
18 247.5 598.5 247.5 2 L
N
(TIMING FUNCTIONS) 259.29 251.28 T
18 198 598.5 198 2 L
N
18 184.5 598.5 184.5 2 L
N
(DEBUGGING FUNCTIONS) 250 188.43 T
18 108 598.5 108 2 L
N
18 94.5 598.5 94.5 2 L
N
(MISCELLANEOUS FUNCTIONS) 239 98.74 T
FMENDPAGE
%%EndPage: "1" 0
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 3 -1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
