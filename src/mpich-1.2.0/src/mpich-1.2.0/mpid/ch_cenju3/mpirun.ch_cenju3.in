#! /bin/sh
exitstatus=0
if [ "$MPIR_HOME" = "" ] ; then 
    MPIR_HOME=#MPIR_HOME#
fi
if [ "$MPIR_HOME" = "#""MPIR_HOME""#" ] ; then
    MPIR_HOME=`pwd`/..
fi
if [ "#MPIRUN_BIN#" = "#""MPIRUN_BIN""#" ] ; then 
    MPIRUN_HOME=$MPIR_HOME/bin
else
    MPIRUN_HOME=#MPIRUN_BIN#
fi
if [ "$argsset" = "" ] ; then
   . $MPIRUN_HOME/mpirun.args
   argsset=1
fi
#
#==================== machine dependent =============================
#
#  Options which depends on the queuing system used on the machine :
#  -----------------------------------------------------------------
#
#  use : Option which kind of commands should be used in order
#        to execute and submit programs.
#
#        use = CJ   : Use native CJ commands
#        use = EASY : Use Easy commands
#
#  easybin  : Full path name (including last /) of directory
#             containing the EASY commands of Cenju-3 or
#             empty string if general path should be used.
#  easywait : Option for interactive mode of EASY
#             easywait = prompt : Wait for prompt of user
#                                 before user program is started.
#             easywait = wait   : Wait and inspect easy queue
#                                 and try to start user program.
#
#===> Select one of the following
#
    use=CJ
#
#   use=EASY
    easybin=/opt/EASY/bin/
#   easybin=
    easywait=wait
#
#============ End of machine dependent =============================
#
#---------------- Batch Mode -------------------------------------
#
    if [ -n "$batch" ] ; then
#
#   Execute Job in batch mode
#
       if [ $mpirun_verbose = 1 ] ; then
          echo executing job in batch mode
       fi
#
       case $use in 
#
       EASY)
            if [ -z "$stdoutfile" ] ; then
               stdoutfile=$PWD_TRIAL/stdout.$$
            else
               tail=`echo $stdoutfile | sed 's/\/.*//'`
               if  [ -z "$tail" = "" ] ; then
                  stdoutfile="$PWD_TRIAL/$stdoutfile"
               fi
            fi
#
            if [ -z "$stderrfile" ] ; then
               stderrfile=$PWD_TRIAL/stderr.$$
            else
               tail=`echo $stderrfile | sed 's/\/.*//'`
               if  [ -z "$tail" = "" ] ; then
                  stderrfile="$PWD_TRIAL/$stderrfile"
               fi
            fi
#
            if [ -z "$stdinfile" ] ; then
               stdinfile=/dev/null
            else
               tail=`echo $stdinfile | sed 's/\/.*//'`
               if  [ -z "$tail" = "" ] ; then
                  stderrfile="$PWD_TRIAL/$stdinfile"
               fi
            fi
#
#           tempfile=$PWD_TRIAL/batch_script.mpirun.$$
            tempfile=batch_script.mpirun.$$
#
            rm -f $tempfile
#
            cat << EOF > $tempfile
#! /bin/sh
cd $PWD_TRIAL
#
# Standard-Input  will be read from  $stdinfile
# Standard-Output will be written to $stdoutfile
# Error   -Output will be written to $stderrfile
#
${easybin}prun -j \$1 -n $np -p $progname -a "$cmdLineArgs" < $stdinfile > $stdou
tfile 2> $stderrfile
EOF
#
            echo "=== submitting batch job : Number of processors = $np"
            echo "===                        Maximal time         = $max_time min
utes"
            chmod +x $tempfile
            $Show ${easybin}psubmit -n $np -t $max_time -b $tempfile
            rm -f $tempfile
            ;;

       CJ | *)
            cjarg=
#
            if [ -n "$stdinfile" ] ; then
               cjarg="-i $stdinfile"
            else
               cjarg=
            fi
#
            if [ -n "$stdoutfile" ] ; then
               cjarg="$cjarg -o $stdoutfile"
            fi
#
            if [ -n "$stderrfile" ] ; then
               cjarg="$cjarg -e $stderrfile"
            fi
#
            $Show cjbr $cjarg $np $progname $cmdLineArgs
#
            ;;
       esac
#
    else
#
#------------------------- Interactive mode ----------------------------
#
       case $use in 
#
       EASY)
          if [ -n "$easy_jid" ] ; then
#
#===> ... user has allocated node. Execute parallel program
#
             $Show ${easybin}prun -j $easy_jid -n $np -p $progname -a \"$cmdLineArgs\"
          else

             tempfile=.tEmP_EaSy.OuTpUt.$$
             rm -f $tempfile
#
             sleep=0
#
             while [ "$status" != 0 -o -z "$easy_jid" ]
             do
                if [ $sleep != 0 ] ; then
                    echo "=== mpirun doesn't return a job id; waiting"
                    sleep 30
                fi
#
                $Show ${easybin}psubmit -i -n $np -t $max_time | tee -a $tempfile
                status=$?
                easy_jid=`fgrep 'JID for this job is' $tempfile | sed -e 's/.*: *\([0-9]*\) */\1/'`
#
                rm -f $tempfile
                sleep=30
             done
#
             if [ "$easywait" = wait ] ; then
#
                tempfile=.tEmP.sEdFiLe.$$
                cat << EOF > $tempfile
/^$easy_jid/!d
s/$easy_jid  *[^ ]* * [^ ]* *[^ ]* . . *\(.\).*/\1/
EOF
#
                echo === Waiting until processors are available
#
                status=W
                while [ "$status" != R ]
                do
                   sleep 5
                   status=`pq | sed -f $tempfile`
                done
#
                rm -f $tempfile
             else
#
#===> Wait for a prompt
#
                cat << EOF
=== Type <ENTER> if the CENJU-3 nodes requested for JID \`\`$easy_jid''
===                 are available (i.e. if you got mail) :"
=== After that, this script will start the parallel program
=== \`\`$progname''.

EOF
#
                read answer
                if [ $? != 0 ]
                then
                   echo '### Error in read : Probably attempted background read'
		exitstatus=1
                exit 1
                fi 
             fi
#
#===> Start parallel program
#
             $Show ${easybin}prun -j $easy_jid -n $np -p $progname -a \"$cmdLineArgs\"
#
#===> Release nodes allocated
#
             $Show ${easybin}prelease $easy_jid < /dev/null
          fi
          ;;

       CJ | *)
#
#===> Get number of processors available
#
          free=`cjpes | fgrep ST_PE_ACTIV | wc -l`
          if [ $mpirun_verbose = 1 -o "$free" -lt $np ] ; then
             echo === waiting for $np processors available
          fi
#
          $Show cjsh -w -n $np $progname $cmdLineArgs
#
          ;;
       esac
    fi
#
    exit 0
