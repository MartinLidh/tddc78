dnl This is an autoconf script.
dnl To rebuild the `configure' script from this, execute the command
dnl 	autoconf
dnl in the directory containing this script.  You must have autoconf
dnl version 1.4 or later.
dnl
dnl The following text appears in the resulting `configure' script,
dnl explaining how to rebuild it.
[#!/bin/sh
# Guess values for system-dependent variables and create Makefiles.
# Generated automatically using autoconf.
# Copyright (C) 1991, 1992, 1993 Free Software Foundation, Inc.
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
CONFIGURE_ARGS="$*"
if test -n "$CONFIGURE_ARGS" ; then
    echo "Configuring with args $CONFIGURE_ARGS"
fi
print_error() {
    echo "*# $*" 2>&1 ;
    }
progname="`echo $0 | sed 's:^\./\./:\./:'`"
usage_msg="
Usage: ${progname} -p4arch=ARCH_TYPE [-alog={on,off}] [-dprintfl={on,off}]
		   [-p4device=device]
                   [-p4comm=shared]  [-listener_pathname="\<pathname\>"]
                   [-rsh=command] [-rshnol] [-cflags=flags] 
                   [-threaded_listener] [-nothreaded_listener]
                   [-dlast] [-listenersig=name] [--disable-nonblockread]
"
RSHCOMMAND=
MDEP_LIBS=
MDEP_CFLAGS=
MDEP_FFLAGS=
MDEP_LFLAGS=
OPTFLAGS="-g"
USERCC=0
CC=${CC:-cc}
USERF77=0
FC=${FC:-f77}
threaded_listener=0
userSet_threaded_listener=0
listener_sig=""
use_nonblock_read=1
#
for arg
do
case $arg in
  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=* | --s=*)
	srcdir=`echo $arg | sed 's/[-a-z_]*=//'` ;;
  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* | --exec=* | --exe=* | --ex=* | --e=*)
	exec_prefix=`echo $arg | sed 's/[-a-z_]*=//'` ;;
  -libbuild_dir=*) libbuild_dir=`echo A$arg | sed 's/A[-a-z_]*=//'` ;;
  -p4arch=*)
     p4arch=`echo $arg|sed 's/-p4arch=//'`
     eval "p4arch_`echo $p4arch`=1"
     echo Setting p4arch to $p4arch
     ;;
  -p4device=*)
     p4device=`echo $arg|sed 's/-p4device=//'`
     eval "p4device_`echo $p4device`=1"
     echo Setting p4device to $p4device
     ;;
  -p4echo=*)
     p4echo=`echo $arg|sed 's/-p4echo=//'`
     echo $p4echo
     ;;
  -p4make=*)
     p4make=`echo $arg|sed 's/-p4make=//'`
     echo Setting p4make to $p4make
     ;;
  -alog=*)
     p4alog=`echo $arg|sed 's/-alog=//'`
     echo Setting p4alog to $p4alog
     ;;
  -p4comm=*)
     p4comm=`echo $arg|sed 's/-p4comm=//'`
     eval "p4comm_`echo $p4comm`=1"
     echo Setting p4comm to $p4comm
     ;;
  -dprintfl=*)
     p4dprintfl=`echo $arg|sed 's/-dprintfl=//'`
     echo Setting p4dprintfl to $p4dprintfl
     ;;
  -dlast)
     MDEP_CFLAGS="$MDEP_CFLAGS -DUSE_HOLD_LAST_DEBUG -DUSE_PRINT_LAST_ON_SIGINT -DUSE_PRINT_LAST_ON_ERROR"
    ;;
  -rsh=*)
     RSHCOMMAND=`echo A$arg|sed 's/A-rsh=//'`
     echo Setting RSHCOMMAND to $RSHCOMMAND
     ;;
   -rshnol)
     RSHNOL=1
     ;;
  -cflags=*)
     USER_CFLAGS="`echo A$arg|sed 's/A-*cflags=//'`"
     ;;
  -listener_pathname=*)
     p4listener_pathname=`echo $arg|sed 's/-listener_pathname=//'`
     echo Setting p4listener_pathname to $p4listener_pathname
     ;;
  -listenersig=*)
     listener_sig=`echo A$arg|sed -e 's/A-listenersig=//g'`
     ;;
  -threaded_list*)
     threaded_listener=1
     userSet_threaded_listener=1
     ;;
  -nothreaded_list*)
     threaded_listener=0
     userSet_threaded_listener=1
     ;;
  -echo)
     set -x
     ;;
  -u | -usage)
     (echo "${usage_msg}") >& 2
     exit 1
     ;;
  -opt=* | --opt=*)
     package="`echo $arg|sed 's/-*opt=//'`"
     OPTFLAGS=$package 
     ;;
  -cc=* | --cc=*)
     CC=`echo $arg|sed 's/-*cc=//'`
     USERCC=1
     ;;
   -socksize=*|--socksize=*)
     SOCKSIZE="`echo $arg|sed 's/-*socksize=//'`"
     ;;
   -*enable-nonblockread)
	use_nonblock_read=1
     ;;
   -*disable-nonblockread)
	use_nonblock_read=0
     ;;
   *)
     # Allow null args
     if test -n "$arg" ; then
         echo "Invalid p4 configure option $arg"
         (echo "${usage_msg}") >& 2
         exit 1;
     fi
     ;;
esac
done
if test -z "$p4arch" ; then
    echo "You must set a P4 architecture with -p4arch=name"
    exit 1
fi
P4ARCH="unknown"
MAKE=make
CLINKER=$CC
FLINKER=$FC
AR="ar lruv"
RM=/bin/rm
P4_OBJ="\$(P4_COMM_OBJ) \$(P4_SOCK_OBJ) \$(P4_SHMEM_OBJ) \$(P4_MPD_OBJ)"
#
# date might include various quotes.  Just to be safe, remove anything
# other than letters, numbers, space, and colon.
P4_CONFIGURED_TIME="`date | sed -e 's/[^a-zA-Z0-9: ]//g'`"
DEFINE_ALOG="#undef ALOG_TRACE"
DEFINE_SYSV_IPC="#undef SYSV_IPC"
DEFINE_VENDOR_IPC="#undef VENDOR_IPC"
DEFINE_P4_DPRINTFL="#define P4_DPRINTFL"
LISTENER_PATHNAME=""
]

# It is important to remove the p4_config.h file if we are performing
# a VPATH build
rm -f config.log p4_config.h
AC_PREPARE()

# Standard directories
if test -z "$top_srcdir" -o "$top_srcdir" = "." ; then 
    top_srcdir=$srcdir
fi
# Remove the config file from the srcdir if this is a VPATH build.
rm -f $top_srcdir/p4_config.h

AC_SUBST(top_srcdir)
if test -z "$exec_prefix" ; then 
    exec_prefix="${top_srcdir}"
fi
AC_SUBST(exec_prefix)
if test -z "$libdir" ; then libdir="$exec_prefix/lib" ; fi
AC_SUBST(libdir)

# libbuild_dir is used to build the libraries in before they are installed.
if test -z "$libbuild_dir" ; then 
    libbuild_dir=`pwd`/lib
fi
if test ! -d $libbuild_dir ; then
    if mkdir $libbuild_dir ; then 
	:
    else
        print_error "Could not create directory $libbuild_dir"
        exit 1
    fi
fi
AC_SUBST(libbuild_dir)

AC_PROG_RANLIB()
# check for valid architecture
# Check for an EXACT match, since that's what the defines require
egrep "^    $p4arch\$" $srcdir/MACHINES > /dev/null 2>&1
if test $? != 0 ; then
    echo Invalid arch $p4arch
    exit 1
fi
# Now substitute the variables
if test -n "$p4make"; then
    MAKE=$p4make
fi
if test -z "$VPATH" ; then
    PAC_MAKE_VPATH
fi
# Set the device (might be either ch_p4 or ch_p4mpd, for example)
if test -n "$p4device"; then
    P4DEVICE=$p4device
fi
#
if test -n "$p4arch_SUN"; then
    P4ARCH=SUN
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#						486 running FreeBSD
if test -n "$p4arch_FREEBSD"; then
    P4ARCH=FREEBSD
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#						486 running NetBSD
if test -n "$p4arch_NETBSD"; then
    P4ARCH=NETBSD
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#						486 running Linux
if test -n "$p4arch_LINUX"; then
    P4ARCH=LINUX
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#                                             KSR
if test -n "$p4arch_KSR"; then
    P4ARCH=KSR
    RANLIB=true
    AC_HAVE_LIBRARY(rpc)
fi
#						Sun running Solaris
if test -n "$p4arch_SUN_SOLARIS"; then
    # We've had so many problems with the threaded listener that we are
    # leaving the default as off.
    #if test $userSet_threaded_listener = 0 -a -z "$p4comm_shared" ; then
    #	threaded_listener=1
    #fi
    P4ARCH=SUN_SOLARIS
    AR="ar ruv"
    RANLIB=true
    # We might want to choose pthreads instead because of the listener....
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
      AC_HAVE_LIBRARY(thread)
    fi
    AC_HAVE_LIBRARY(socket)
    AC_HAVE_LIBRARY(nsl)

    PAC_IS_GETTIMEOFDAY_OK(,MDEP_CFLAGS="$MDEP_CFLAGS -DUSE_WIERDGETTIMEOFDAY")

    dnl #MDEP_LIBS = /usr/ucblib/libucb.a -lsocket -lnsl  # for fortran
fi
#						Intel x86 running Solaris
if test -n "$p4arch_I86_SOLARIS"; then
    P4ARCH=I86_SOLARIS
    AR="ar ruv"
    RANLIB=true
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
      AC_HAVE_LIBRARY(thread)
    fi
    AC_HAVE_LIBRARY(socket)
    AC_HAVE_LIBRARY(nsl)
    AC_MSG_CHECKING(for how many arguments gettimeofday takes)
    AC_TEST_PROGRAM([#include <sys/time.h>
main() {struct timeval tp;
gettimeofday(&tp);return 0;}],
MDEP_CFLAGS="$MDEP_CFLAGS -DUSE_WIERDGETTIMEOFDAY"
AC_MSG_RESULT(one!),AC_MSG_RESULT(two - whew))
    dnl #MDEP_LIBS = /usr/ucblib/libucb.a -lsocket -lnsl  # for fortran
    fi
#						HP workstation
if test -n "$p4arch_HP"; then
    P4ARCH=HP
    RANLIB=true
    libs_before="$LIBS"
    AC_HAVE_LIBRARY(V3)
    if test "$LIBS" = "$libs_before" ; then
       echo "HP currently requires the System V Release 3 libraries (libV3.a)"
       exit 1
    fi
    # nsl is required in HPUX 11 for the xdr routines
    AC_HAVE_LIBRARY(nsl)
    AC_HAVE_LIBRARY(U77)
    # -lV3 is for sighold, etc.
    MDEP_FFLAGS="+U77 +T"
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#						DEC Alpha workstation
if test -n "$p4arch_ALPHA"; then
    P4ARCH=ALPHA
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#                                             CRAY
if test -n "$p4arch_CRAY"; then
    P4ARCH=CRAY
    AR='ar ruv'
    if test $USERCC = 0 ;  then CC=cc ; fi
    if test $USERF77 = 0 ; then FC=cf77 ; fi
    CLINKER=$CC
    FLINKER=$FC
    RANLIB=true
fi
#                                             PARAGONIP  (Paragon w. Sockets)
#     We use ALPHA for P4ARCH because the alpha and paragon both use OSF/1
if test -n "$p4arch_PARAGONIP"; then
    P4ARCH=ALPHA                             
    AC_HAVE_LIBRARY(rpc)
    AR='ar860 r'
    if test $USERCC = 0 ;  then CC=icc ; fi
    if test $USERF77 = 0 ; then FC=if77 ; fi
    CLINKER=$CC
    FLINKER=$FC
    RANLIB=true
fi
#                                             NeXT workstation
if test -n "$p4arch_NEXT"; then
    P4ARCH=NEXT
    MDEP_CFLAGS=""                        # Black hardware, with NeXTstep
    #MDEP_CFLAGS="-arch i386"             # for 486's running NeXTstep
    #MDEP_CFLAGS="-arch m68k -arch i386"  # fat binaries, for both
fi
#						DEC 5000 workstation
if test -n "$p4arch_DEC5000"; then
    P4ARCH=DEC5000
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#						RS6000 workstation
if test -n "$p4arch_RS6000"; then
    if test $userSet_threaded_listener = 0 -a -z "$p4comm_shared" ; then
	threaded_listener=1
    fi
    P4ARCH=RS6000
    FC=xlf
    FLINKER=xlf
    RANLIB=true
    AC_HAVE_LIBRARY(bsd)
    MDEP_CFLAGS=-D_ALL_SOURCE
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#						SP using TCP
if test -n "$p4arch_SP1"; then
    P4ARCH=SP1
    FC=xlf
    FLINKER=xlf
    RANLIB=true
    AC_HAVE_LIBRARY(bsd)
    if test -n "$p4comm_shared"; then
      DEFINE_SYSV_IPC="#define SYSV_IPC"
    fi
fi
#						SP with MPL
if test -n "$p4arch_SP1_EUI"; then
    P4ARCH=SP1_EUI
    if test $USERCC = 0 ;  then CC=mpcc ; fi
    if test $USERF77 = 0 ; then FC=mpxlf ; fi
    FLINKER=$FC
    CLINKER=$CC
    RANLIB=true
    AC_HAVE_LIBRARY(bsd)
    MDEP_CFLAGS = -I/usr/lpp/poe/include
fi
#						SP with EUIH (obsolete)
if test -n "$p4arch_SP1_EUI"; then
    P4ARCH=SP1_EUIH
    if test $USERCC = 0 ;  then CC=cc ; fi
    if test $USERF77 = 0 ; then FC=xlf ; fi
    FLINKER="xlf -bimport:/usr/lpp/euih/eui/eui.exp"
    CLINKER="xlc -bimport:/usr/lpp/euih/eui/eui.exp -e main"
    RANLIB=true
    AC_HAVE_LIBRARY(bsd)
    MDEP_CFLAGS=-D_ALL_SOURCE
fi
#						SGI workstations
if test -n "$p4arch_SGI"; then
    P4ARCH=SGI
    RANLIB=true
    AC_HAVE_LIBRARY(sun)
    dnl    MDEP_CFLAGS=-cckr
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
# temporary until complete SGI fixup:  accept SGI5 as valid arch
#						SGI workstations with IRIX 5
if test -n "$p4arch_SGI5"; then
    P4ARCH=SGI
    RANLIB=true
    AC_HAVE_LIBRARY(sun)
    dnl    MDEP_CFLAGS=-cckr
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#
# Force 32-bit objects
if test -n "$p4arch_SGI32"; then
    P4ARCH=SGI
    RANLIB=true
    AC_HAVE_LIBRARY(sun)
    # This choice of flags is for the SGI compilers.  If the user chose
    # gcc, they won't work.
    PAC_CHECK_COMPILER_OPTION(-32,MDEP_CFLAGS="-32";MDEP_LFLAGS="-32")
    PAC_CHECK_COMPILER_OPTION([-woff 1552,1174],
	[MDEP_CFLAGS="$MDEP_CFLAGS -woff 1552,1174"])
    MDEP_FFLAGS="-32" # -woff 1552,1174"
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#
# Force 32-bit objects (other way)
if test -n "$p4arch_SGIN32"; then
    P4ARCH=SGI
    RANLIB=true
    AC_HAVE_LIBRARY(sun)
    # This choice of flags is for the SGI compilers.  If the user chose
    # gcc, they won't work.
    PAC_CHECK_COMPILER_OPTION(-n32,MDEP_CFLAGS="-n32";MDEP_LFLAGS="-n32")
    PAC_CHECK_COMPILER_OPTION([-woff 1552,1174],
	[MDEP_CFLAGS="$MDEP_CFLAGS -woff 1552,1174"])
    MDEP_FFLAGS="-n32" # -woff 1552,1174"
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#						SGI workstations, IRIX 6
if test -n "$p4arch_SGI6"; then
    P4ARCH=SGI
    RANLIB=true
    AC_HAVE_LIBRARY(sun)
    dnl MDEP_CFLAGS="-cckr -woff 1552,1174"
    dnl MDEP_FFLAGS="-cckr -woff 1552,1174"
    PAC_CHECK_COMPILER_OPTION([-woff 1552,1174],
	[MDEP_CFLAGS="$MDEP_CFLAGS -woff 1552,1174"])
    MDEP_FFLAGS="" # "-woff 1552,1174"
    AC_HAVE_FUNCS(setsid)
    AC_HAVE_FUNCS(isatty)
dnl    A C_DEFINE(SET_NEW_PGRP)
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#						SGI multiprocessors, like Onyx
if test -n "$p4arch_SGI_MP"; then
    P4ARCH=SGI_MP
    RANLIB=true
    AC_HAVE_LIBRARY(sun)
    AC_HAVE_FUNCS(setsid)
    AC_HAVE_FUNCS(isatty)
    dnl MDEP_CFLAGS=-cckr
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#						SGI Challenge Series
if test -n "$p4arch_SGI_CH"; then
    P4ARCH=SGI_CH
    RANLIB=true
    AC_HAVE_FUNCS(setsid)
    AC_HAVE_FUNCS(isatty)
    dnl MDEP_CFLAGS="-cckr -64 -mips3 -woff 1552,1174" # -non_shared
    dnl MDEP_FFLAGS="-cckr -64 -mips3 -woff 1552,1174" # -non_shared
    PAC_CHECK_COMPILER_OPTION(-64,MDEP_CFLAGS="-64";MDEP_LFLAGS="-64")
    PAC_CHECK_COMPILER_OPTION(-mips3,MDEP_CFLAGS="$MDEP_CFLAGS -mips3")
    PAC_CHECK_COMPILER_OPTION([-woff 1552,1174],
	[MDEP_CFLAGS="$MDEP_CFLAGS -woff 1552,1174"])
    dnl MDEP_CFLAGS="-64 -mips3 -woff 1552,1174" # -non_shared
    MDEP_FFLAGS="-64 -mips3" #  -woff 1552,1174" # -non_shared
    if test -n "$p4comm_shared"; then
       DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#						SGI Challenge Series
if test -n "$p4arch_SGI_CH32"; then
    P4ARCH=SGI_CH
    RANLIB=true
    AC_HAVE_FUNCS(setsid)
    AC_HAVE_FUNCS(isatty)
    PAC_CHECK_COMPILER_OPTION(-n32,MDEP_CFLAGS="-n32";MDEP_LFLAGS="-n32")
    PAC_CHECK_COMPILER_OPTION([-woff 1552,1174],
	[MDEP_CFLAGS="$MDEP_CFLAGS -woff 1552,1174]")
    MDEP_FFLAGS="-n32" # -woff 1552,1174"
    if test -n "$p4comm_shared"; then
       DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#						SGI Power Challenge Series
if test -n "$p4arch_SGI_CH64"; then
    P4ARCH=SGI_CH64
    RANLIB=true
    dnl MDEP_CFLAGS="-cckr -64 -mips4 -woff 1552,1174"# -non_shared
    dnl MDEP_FFLAGS="-cckr -64 -mips4 -woff 1552,1174"# -non_shared
    PAC_CHECK_COMPILER_OPTION(-64,MDEP_CFLAGS="-64";MDEP_LFLAGS="-64")
    PAC_CHECK_COMPILER_OPTION(-mips4,MDEP_CFLAGS="$MDEP_CFLAGS -mips4")
    PAC_CHECK_COMPILER_OPTION([-woff 1552,1174],
	[MDEP_CFLAGS="$MDEP_CFLAGS -woff 1552,1174]")
    MDEP_FFLAGS="-64 -mips4" # -woff 1552,1174"
    AC_HAVE_FUNCS(setsid)
    AC_HAVE_FUNCS(isatty)
    if test -n "$p4comm_shared"; then
      DEFINE_VENDOR_IPC="#define VENDOR_IPC"
    fi
fi
#                                              UXPM (MPIS chip)
if test -n "$p4arch_UXPM"; then
    # Make it think that it is an IRIX v5 SGI
    P4ARCH=SGI
    RANLIB=true
    LIBS="$LIBS -lsocket -lnsl"
    MDEP_CFLAGS="-DNEEDS_NETINET"
fi
#                                              UXPV  (Fujitsu VX,VPP300,VPP700)
if test -n "$p4arch_UXPV"; then
    # Make it think that it is an IRIX v5 SGI
    P4ARCH=SGI
    RANLIB=true
    LIBS="$LIBS -lsocket -lnsl"
    MDEP_CFLAGS="-DNEEDS_NETINET"
fi
#                                              Symmetry with Dynix
if test -n "$p4arch_SYMMETRY"; then
    P4ARCH=SYMMETRY
    FILE_LINK=ln 
    FC=fortran
    CLINKER="cc -Z1000000"
    FLINKER="fortran -Z1000000"
    LIBS="$LIBS -lpps -lseq"
    MDEP_CFLAGS=
    MDEP_FFLAGS=
fi
#                                              Symmetry with PTX
if test -n "$p4arch_SYMMETRY_PTX"; then
    P4ARCH=SYMMETRY_PTX
    FILE_LINK=ln
    FC=fortran
    FLINKER=fortran 
    RANLIB=true
    LIBS="$LIBS -lpps -lseq -lrpc -lsocket -linet -lnsl"
    MDEP_CFLAGS="-Wc,-seq"
fi

#
# dump copy of MDEP_CFLAGS into file for other system to pick up
/bin/rm -f mpdepcflags
echo $MDEP_CFLAGS > mdepcflags
# evaluate variables for p4_config.h
if test "$p4alog" = "on"; then
    DEFINE_ALOG="#define ALOG_TRACE"
fi
if test "$p4dprintfl" = "off"; then
    DEFINE_P4_DPRINTFL="#undef P4_DPRINTFL"
fi
if test -n "$p4listener_pathname"; then
    LISTENER_PATHNAME="$p4listener_pathname"
fi
#
# Check for cross-compilation.
AC_CROSS_CHECK()
#
# Look for netinet/in.h and sys/socketvar.h
has_rpc_rpc=0
PAC_CHECK_HEADERS(rpc/rpc.h,has_rpc_rpc=1)
has_netinet_in=0
PAC_CHECK_HEADERS(netinet/in.h,has_netinet_in=1)
PAC_CHECK_HEADERS(arpa/inet.h)
PAC_CHECK_HEADERS(sys/socketvar.h)
PAC_CHECK_HEADERS(stdlib.h)
PAC_CHECK_HEADERS(unistd.h)
PAC_CHECK_HEADER(stdarg.h,[AC_DEFINE(HAVE_STDARG_H)
havestdarg=1])
PAC_CHECK_HEADERS(string.h)
PAC_CHECK_HEADERS(strings.h)
PAC_CHECK_HEADERS(termio.h termios.h)
#
# In some cases, we need both string.h and strings.h .  Some systems
# apparently complain, so we try to include them both
AC_MSG_CHECKING(that string.h and strings.h can be included)
AC_TEST_PROGRAM([#include <strings.h>
#include <string.h>
main() {return 0;}],
AC_MSG_RESULT(yes)
AC_DEFINE(BOTH_STRING_INCS),AC_MSG_RESULT(no))
#
if test "$has_rpc_rpc" = 1 ; then
    # does it really?
    # (gcc on Solaris 5.6 sometimes fails, particularly when OS was upgraded
    # from 5.5 to 5.6 but gcc was not reinstalled).
    AC_COMPILE_CHECK([correct headers with rpc/rpc.h],[
#include <sys/types.h>
#include <rpc/rpc.h>]
,,,cc_broken=1)
    if test "$cc_broken" = 1; then
        echo "Your C compiler $CC fails to compile the program"
        echo "#include <sys/types.h>"
        echo "#include <rpc/rpc.h>"
	echo "If you are using gcc, make sure that the system include"
        echo "files and the gcc include files are consistent.  If "
        echo "you have upgraded the OS, you may need to reinstall gcc"
        exit 1
    fi
fi
if test "$has_netinet_in" = 1 ; then
    # does it really?
    # (gcc on Solaris 5.6 sometimes fails, particularly when OS was upgraded
    # from 5.5 to 5.6 but gcc was not reinstalled).
    AC_COMPILE_CHECK([correct headers with netinet/in.h],[
#include <sys/types.h>
#include <netinet/in.h>]
,,,cc_broken=1)
    if test "$cc_broken" = 1; then
        echo "Your C compiler $CC fails to compile the program"
        echo "#include <sys/types.h>"
        echo "#include <netinet/in.h>"
	echo "If you are using gcc, make sure that the system include"
        echo "files and the gcc include files are consistent.  If "
        echo "you have upgraded the OS, you may need to reinstall gcc"
        exit 1
    fi
fi
#
# It isn't enough to check for stdarg.  Even gcc doesn't get it right;
# on some systems, the gcc version of stdio.h loads stdarg.h WITH THE WRONG
# OPTIONS (causing it to choose the OLD STYLE va_start etc).
#
if test -n "$havestdarg" ; then
    PAC_COMPILE_CHECK_FUNC(stdarg is correct,[
#include <stdio.h>
#include <stdarg.h>
int func( int a, ... ){
int b;
va_list ap;
va_start( ap, a );
b = va_arg(ap, int);
printf( "%d-%d\n", a, b );
va_end(ap);
fflush(stdout);
return 0;
}
int main() { func( 1, 2 ); return 0;}],AC_DEFINE(USE_STDARG))
fi
#
AC_HAVE_FUNCS(sigsetmask)
AC_HAVE_FUNCS(sigblock)
# Look for sigaction routine (instead of signal)
AC_HAVE_FUNCS(sigaction)
AC_COMPILE_CHECK(for struct sigaction,[#include <signal.h>],[
struct sigaction act; sigaddset( &act.sa_mask, SIGINT
#);],sigaction_ok="yes",sigaction_ok="no")
# XOPEN mandates that union semun NOT be defined(!)
AC_COMPILE_CHECK(for union semun,[#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>],[
union semun arg;arg.val=0;],,AC_DEFINE(SEMUN_UNDEFINED))
# strerror is prefered over extern char *sys_errlist[];
AC_HAVE_FUNCS(strerror)
AC_HAVE_LIBRARY(crypt,CRYPT_LIBS=-lcrypt)
# Look for vprintf
AC_HAVE_FUNCS(vprintf)

#
# Check that nonblocking read works
if test -s $top_srcdir/readblock.c -a $use_nonblock_read = 1 ; then
    AC_MSG_CHECKING([that read O_NDELAY works])
    readworks=0
    AC_TEST_PROGRAM([`cat $top_srcdir/readblock.c`],readworks=1)
    if test $readworks = 1 ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(NONBLOCKING_READ_WORKS)
    else
	AC_MSG_RESULT(no)
    fi
fi
#
# Test for sgttyb and the ability to set noecho on terminals
PAC_COMPILE_CHECK_FUNC(echo off supported with sgttyb,[
#include <stdio.h>
#ifdef FREEBSD
#include <sys/ioctl_compat.h>
#else
#include <sys/ioctl.h>
#endif
static struct sgttyb orig_tty;
int main() { struct sgttyb tty_new;
    ioctl(0, TIOCGETP, &orig_tty);
    tty_new = orig_tty;
    tty_new.sg_flags &= ~(ECHO);
    ioctl(0, TIOCSETP, &tty_new);
    return 0;}],,AC_DEFINE(NO_ECHO))

if test -n "$RSHCOMMAND" ; then
    AC_DEFINE(HAS_RSHCOMMAND)
fi
if test -n "$RSHNOL" ; then
    AC_DEFINE(RSH_HAS_NO_L)
fi
#
if test $threaded_listener = 1 ; then
    # Try to find a thread package
    has_pthread=0
    PAC_CHECK_HEADER(pthread.h,[AC_DEFINE(HAVE_PTHREAD_H)
    has_pthread=1])
    if test $has_pthread = 1 ; then
        has_pthread=0
        AC_HAVE_LIBRARY(pthread,has_pthread=1)
        if test $has_pthread = 1 ; then
            # Could also check for pthread_create
	    AC_DEFINE(THREAD_LISTENER)
	    AC_DEFINE(USE_PTHREADS)
	    # We need this to ensure that things like errno are thread safe.
	    AC_DEFINE(_POSIX_C_SOURCE,199506L)
	    AC_DEFINE(_POSIX_SOURCE)
	    # In order to use XDR, we may also need to define __EXTENSIONS__
	    # or other awful things.
	    AC_DEFINE(__EXTENSIONS__)
	    LIBS="$LIBS -lpthread"
            echo "Using threaded listener"
        fi
    fi
fi
#
# Some systems don't include support for xdr.  Check for it
AC_HAVE_FUNCS(xdrmem_create)
#
# We do NOT add the CFLAGS and DEFS to the MDEP_CFLAGS because they are 
# used ONLY in building the p4 package itself.  However, we add USER_CFLAGS
# which were specified on the configure
#
CFLAGS="$USER_CFLAGS $CFLAGS $DEFS"
#MDEP_CFLAGS="$USER_CFLAGS $MDEP_CFLAGS"
#
# Set the sock_buff_size variable through the "optflags" variable
if test -n "$SOCKSIZE" ; then
    OPTFLAGS="$OPTFLAGS -DSET_SOCK_BUFF_SIZE -DSOCK_BUFF_SIZE=$SOCKSIZE"
fi
if test -n "$listener_sig" ; then
    LISTENER_ATTN_SIGNAL="$listener_sig"
    AC_DEFINE_UNQUOTED(LISTENER_ATTN_SIGNAL,$listener_sig)
fi
#
# Variables used by Makefile.in's:
MDEP_LIBS="$LIBS"
AC_SUBST(P4ARCH)dnl
AC_SUBST(P4DEVICE)dnl
AC_SUBST(MAKE)dnl
AC_SUBST(CC)dnl
AC_SUBST(DEFS)dnl
AC_SUBST(CFLAGS)dnl
AC_SUBST(FC)dnl
AC_SUBST(CLINKER)dnl
AC_SUBST(FLINKER)dnl
AC_SUBST(AR)dnl
AC_SUBST(RANLIB)dnl
AC_SUBST(RM)dnl
AC_SUBST(P4_OBJ)dnl
AC_SUBST(MDEP_LIBS)dnl
AC_SUBST(CRYPT_LIBS)dnl
AC_SUBST(MDEP_CFLAGS)dnl
AC_SUBST(MDEP_FFLAGS)dnl
AC_SUBST(MDEP_LFLAGS)dnl
AC_SUBST(OPTFLAGS)dnl
AC_SUBST(P4_CONFIGURED_TIME)dnl
AC_SUBST(DEFINE_ALOG)dnl
AC_SUBST(DEFINE_SYSV_IPC)dnl
AC_SUBST(DEFINE_VENDOR_IPC)dnl
AC_SUBST(DEFINE_P4_DPRINTFL)dnl
AC_SUBST(LISTENER_PATHNAME)dnl
AC_SUBST(RSHCOMMAND)dnl
AC_SUBST(VPATH)dnl
AC_OUTPUT(Makefile lib/Makefile alog/Makefile usc/Makefile usc/usctest/Makefile include/Makefile lib_f/Makefile bin/Makefile servers/Makefile)
dnl 
dnl This code removes that stupid first line placed by ac_output
PAC_OUTPUT_EXEC(p4_config.h)

