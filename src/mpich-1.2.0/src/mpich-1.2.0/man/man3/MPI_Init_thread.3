.TH MPI_Init_thread 3 "10/16/1999" " " "MPI"
.SH NAME
MPI_Init_thread \-  Initialize the MPI execution environment 
.SH SYNOPSIS
.nf
#include "mpi.h"
int MPI_Init_thread(int *argc, char ***argv, int required, int *provided )
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B argc 
- Pointer to the number of arguments 
.PD 1
.PD 0
.TP
.B argv 
- Pointer to the argument vector
.PD 1
.PD 0
.TP
.B required 
- Level of desired thread support
.PD 1

.SH OUTPUT PARAMETER
.PD 0
.TP
.B provided 
- Level of provided thread support
.PD 1

.SH COMMAND LINE ARGUMENTS
MPI specifies no command-line arguments but does allow an MPI
implementation to make use of them.  See 
.I MPI_INIT
for a description of
the command line arguments supported by 
.I MPI_INIT
and 
.I MPI_INIT_THREAD
.

.SH NOTES
Note that the Fortran binding for this routine does not have the 
.I argc
and
.I argv
arguments. (
.I MPI_INIT_THREAD(required, provided, ierror)
)

Currently, MPICH places the same restrictions on 
.I MPI_INIT_THREAD
as
on 
.I MPI_INIT
(see the 
.I MPI_INIT
man page).  When MPICH fully supports
MPI-2, this restriction will be removed (as requried by the MPI-2
standard).

.SH SIGNALS USED
The MPI standard requires that all signals used be documented.  The MPICH
implementation itself uses no signals, but some of the software that MPICH
relies on may use some signals.  The list below is partial and should
be independantly checked if you (and any package that you use) depend
on particular signals.

.SH IBM POE/MPL FOR SP2
SIGHUP, SIGINT, SIGQUIT, SIGFPE, SIGSEGV, SIGPIPE, SIGALRM, SIGTERM,
SIGIO

.SH -MPEDBG SWITCH
SIGQUIT, SIGILL, SIGFPE, SIGBUS, SIGSEGV, SIGSYS

.SH MEIKO CS2
SIGUSR2

.SH CH_P4 DEVICE
SIGUSR1

The ch_p4 device also catches SIGINT, SIGFPE, SIGBUS, and SIGSEGV; this
helps the p4 device (and MPICH) more gracefully abort a failed program.

.SH INTEL PARAGON (CH_NX AND NX DEVICE)
SIGUSR2

.SH SHARED MEMORY (CH_SHMEM DEVICE)
SIGCHLD

Note that if you are using software that needs the same signals, you may
find that there is no way to use that software with the MPI implementation.
The signals that cause the most trouble for applications include
.I SIGIO
, 
.I SIGALRM
, and 
.I SIGPIPE
.  For example, using 
.I SIGIO
and
.I SIGPIPE
may prevent X11 routines from working.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Errhandler_set
; the predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarentee that an MPI program can continue past
an error.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- This error class is associated with an error code that 
indicates that an attempt was made to call 
.I MPI_INIT
a second time.
.I MPI_INIT
may only be called once in a program.
.PD 1
.SH LOCATION
initthread.c
