AC_INIT(src/comm.h)
#
# This file was in src, but needs to to bee in a place where it cannot be 
# confused with a VPATH version.  For example, in the root directory.
AC_CONFIG_HEADER(mpi2c++_config.h)

#
# Configure script for MPI C++ Bindings.
# Set some directories and some defaults.
#

TOPDIR=`pwd`
DISTDIR=`dirname $TOPDIR`


#
# Directories for other packages
#

if test "$prefix" != "NONE"; then
    INSTALLDIR=$prefix
else
    INSTALLDIR="/usr/local"
fi

MPI_IMP=other_vendor
MPI_DIR=$prefix
MPI_INCDIR=

#MPI_CXX=
# Do this later -- #$%^#$ HP-UX!!
MPI_CXXFLAGS=
MPI_LDFLAGS=
MPI_LIBS=

MPI_CONSTANTS_BAD=0


#
# Balky flags
#

BALKY_CXX=
BALKY_INCDIR=
BALKY_CXXFLAGS=
BALKY_LIBDIR=
BALKY_LIBS=
BALKY_LDFLAGS=


#
# Compiler flags
#

NOOPT=
OPTFLAGS="-O"
EXAM_OPTFLAGS=$OPTFLAGS
TEST_OPTFLAGS=$OPTFLAGS


#
# Miscellaneous flags
#

MPICH_DEV=
EXTRA_CXXFLAGS=
EXCPTN_CXXFLAGS=
EXCPTN_LDFLAGS=
IV_DESTRUCTORS=1
WANT_SOCKET_LIBS=
WANT_THREAD_LIBS=
ARCH=
EXFLAGS=
FORCE_EXFLAGS=

# WDG: VPATH is used, but we allow it to be imported from the environment

#
# Get our system type
# Set up for some screwy machines
#

AC_CANONICAL_HOST

# 
# WDG: It is *wrong* to set these options before we know what compiler
# we are using.  After all, we may be using g++!
#
# (case on host moved to later)
case "$host" in
    *-hp-hpux*)
        # WDG, 11/9/99:
	# It is *NOT* correct to chose compiler flags based on the system
        # For example, what if g++ is being used?
        # The following flags for are the aCC compiler.  
        # Unfortunately, the compiler isn't available yet, so I can't
	# add the appropriate tests.  Errg.  
        
        EXTRA_CXXFLAGS="+W829"
        CXXFLAGS="$CXXFLAGS $EXTRA_CXXFLAGS"
	EXFLAGS="+eh"

        NOOPT="-Wl,+vnocompatwarnings"
        OPTFLAGS="+O1 -Wl,+vnocompatwarnings"
        EXAM_OPTFLAGS=$OPTFLAGS
        TEST_OPTFLAGS=$OPTFLAGS

	MPI_CXX_SAVE=$MPI_CXX

	ARCH=HPUX
        ;;

    mips-sgi-irix*)
        OPTFLAGS="-O3"
        TEST_OPTFLAGS=$OPTFLAGS
        EXAM_OPTFLAGS=$OPTFLAGS
	ARCH=IRIX
        ;;

    *-cray-unicos*)
	# Yuk!  We have to turn off all optimization in the test suite because
	# Cray's CC version 3.0.0.0 runs out of memory when compiling modules
	# like port_test.cc and request_array_test.cc.  Doh!!

	NOOPT="-O0"
	OPTFLAGS="-O3"
	TEST_OPTFLAGS=$NOOPT
	EXAM_OPTFLAGS=$OPTFLAGS

	EXFLAGS="-h exceptions"
	ARCH=CRAY
	;;
esac

#
# Now we can clear MPI_CXX
#

MPI_CXX=


#
# Set autoconf for C++
#

AC_LANG_CPLUSPLUS


#
# Figure out which brand of echo we have and define
# prompt and print shell functions accordingly.
#
# Blatently stolen from the TIFF configure file.
#

if test `echo foo\\\c`@ = "foo@"; then
    prompt()
    {
        echo "$* \\c"
    }
elif test "`echo -n foo`@" = "foo@"; then
    prompt()
    {
        echo -n "$* "
    }
else
    prompt()
    {
        echo "$*"
    }
fi


#
# Find some extra programs
#

AC_PATH_PROG(AWK, awk)
AC_PATH_PROG(WC, wc)

# From MPICH configure:
# Look for a style of VPATH.  Known forms are
# VPATH = .:dir
# .PATH: . dir
#
# Defines VPATH or .PATH with . $(srcdir)
# Requires that vpath work with implicit targets
# NEED TO DO: Check that $< works on explicit targets.
#
AC_SUBST(VPATH)
AC_MSG_CHECKING(for virtual path format)
rm -rf conftest*
mkdir conftestdir
cat >conftestdir/a.c <<EOF
A sample file
EOF
cat > conftest <<EOF
all: a.o
VPATH=.:conftestdir
.c.o:
	@echo \$<
EOF
ac_out=`$MAKE -f conftest 2>&1 | grep 'conftestdir/a.c'`
if test -n "$ac_out" ; then 
    AC_MSG_RESULT(VPATH)
    VPATH='VPATH=.:$(srcdir)'
else
    rm -f conftest
    cat > conftest <<EOF
all: a.o
.PATH: . conftestdir
.c.o:
	@echo \$<
EOF
    ac_out=`$MAKE -f conftest 2>&1 | grep 'conftestdir/a.c'`
    if test -n "$ac_out" ; then 
        AC_MSG_RESULT(.PATH)
        VPATH='.PATH: . $(srcdir)'
    else
	AC_MSG_RESULT(neither VPATH nor .PATH works)
    fi
fi
rm -rf conftest*

#
# Check --with values for specific MPI implementations.  Check for:
#  - wrapper compilers that come with some implementations
#  - specific options necessary for some MPI implementations
#
# LAM 6.0/6.1
#

AC_ARG_WITH(lam,	[--with-lam=MPI_DIR	Top-level install directory for LAM/MPI], MPI_IMP="lam" WITHDIR=$withval)

if test "$MPI_IMP" = "lam"; then
    if test "$LAMHCP" = ""; then
        AC_MSG_ERROR([LAMHCP environment variable not set])
        exit
    fi

    AC_PATH_PROG(MPI_CXX, hcp, no)
    if test "$MPI_CXX" = "no"; then
        AC_MSG_CHECKING([for hcp (elsewhere)])
        if test -x $WITHDIR/bin/hcp; then
            MPI_CXX=$WITHDIR/bin/hcp
            AC_MSG_RESULT($MPI_CXX)
        elif test -x $WITHDIR/hcp; then
            MPI_CXX=$WITHDIR/hcp
            AC_MSG_RESULT($MPI_CXX)
        else
            AC_MSG_ERROR([cannot continue -- put hcp in your path])
        fi
    fi
    CXX=$MPI_CXX

    MPI_LIBS="-lmpi"

    if test "$ARCH" = "IRIX"; then
	AC_DEFINE(LAMIRIX, 1)
    fi

    AC_DEFINE(LAM61, 1)
fi

#
# MPICH 1.0.13 (or higher)
#

AC_ARG_WITH(mpich,	[--with-mpich=MPI_DIR	Top-level install directory for MPICH/MPI], MPI_IMP="mpich" WITHDIR=$withval)
AC_ARG_WITH(mpichdev,	[--with-mpichdev=LIBDIR	Library subdirectory for MPICH/MPI], MPI_IMP="mpich" MPICH_DEV=$withval)
AC_ARG_WITH(mpichbin,   [--with-mpichbin=BINDIR bin subdirectory for MPICH/MPI], MPI_IMP="mpich" MPICH_BIN=$withval)
AC_ARG_WITH(mpichsrc,   [--with-mpichsrc=SRCDIR source home for MPICH/MPI], MPI_IMP="mpich" MPICH_SRC=$withval)
AC_ARG_WITH(mpichlib,   [--with-mpichlib=LIBDIR Library directory for MPICH/MPI], MPI_IMP="mpich" MPILIB_DIR=$withval)

if test "$MPI_IMP" = "mpich"; then

    if test "$WITHDIR" = "yes"; then
        AC_MSG_ERROR([supplied --with-mpich without a directory])
    fi

    AC_MSG_CHECKING([MPICH version])
    patchfile=$WITHDIR/include/patchlevel.h
    if test ! -s $patchfile -a -n "$MPICH_SRC" ; then
	# look for it in the source location
        if test -s $MPICH_SRC/include/patchlevel.h ; then
	    patchfile=$MPICH_SRC/include/patchlevel.h
	fi
    fi
    MPICH_VERSION=`cat $patchfile | awk '{print $3}' | sed -e 's/\.[0-9]//' | tr '\012' '.'`
    if test "$MPICH_VERSION" = "1.0.0.13."; then
        MPI_CONSTANTS_BAD=1
        AC_DEFINE(MPICH1013)
        AC_MSG_RESULT([1.0.13 (you should upgrade)])
    elif test "$MPICH_VERSION" = "1.1.0."; then
        AC_DEFINE(MPICH110)
        AC_MSG_RESULT([1.1.0 (you should upgrade)])
    else

	#
	# Argh!  MPICH changed the format of their patchlevel file
	# as of version 1.1.1.
	#

	MPICH_VERSION=`grep 'PATCHLEVEL ' $patchfile | awk '{print $3}'`
	mv1=`grep 'PATCHLEVEL_SUBMINOR' $patchfile | awk '{print $3}'`
	MPICH_VERSION="$MPICH_VERSION.$mv1."

	if test -z "$MPILIB_DIR" ; then
  	    MPILIB_DIR=$WITHDIR/$MPICH_DEV
        fi
	if test "$MPICH_VERSION" = "1.1.1."; then
	    AC_DEFINE(MPICH111)
	    AC_MSG_RESULT([1.1.1 (you should upgrade)])
	elif test "$MPICH_VERSION" = "1.1.2."; then
	    AC_DEFINE(MPICH112)
	    AC_MSG_RESULT([1.1.2 (good)])
	elif test "$MPICH_VERSION" = "1.1.3."; then
            # Need to make this MPICH113 eventually
	    AC_DEFINE(MPICH112)
	    AC_MSG_RESULT([1.1.3 (good)])
	elif test "$MPICH_VERSION" = "1.2.0."; then
            # Need to make this MPICH120 eventually
	    AC_DEFINE(MPICH112)
	    AC_MSG_RESULT([1.2.0 (good)])
	else
	    AC_DEFINE(MPICH)
	    AC_MSG_RESULT([unrecognized MPICH level -- good luck!])
	fi
    fi

    if test -z "$MPILIB_DIR" ; then
        MPILIB_DIR=$WITHDIR/$MPICH_DEV
    fi
    
    OLD_ARCH=$ARCH
    if test -x $WITHDIR/util/tarch; then 
	ARCH=`$WITHDIR/util/tarch | sed s/-/_/g`
    elif test -x $WITHDIR/bin/tarch; then
	ARCH=`$WITHDIR/bin/tarch | sed s/-/_/g`
    fi

    if test -d "$WITHDIR/lib"; then
      MPICHLIBDIR=lib
    elif test -d "$WITHDIR/build"; then
      MPICHLIBDIR=build
    else
	AC_MSG_ERROR([could not find MPICH support for $ARCH])
    fi

    if test ! "$MPICH_DEV" = ""; then
	DEVICE=$MPICH_DEV
    elif test -d "$WITHDIR/$MPICHLIBDIR/$ARCH"; then
	echo "no MPICH device specified"
	AC_MSG_CHECKING([for existing MPICH devices])
	devices=""
	for device in `/bin/ls $WITHDIR/$MPICHLIBDIR/$ARCH`; do
	    if test -d $WITHDIR/$MPICHLIBDIR/$ARCH/$device; then
		devices="$device $devices"
	    fi
	done
	devices=`echo "$devices" | sed -e 's/^[ 	]*//' -e 's/[ 	]*$//'`
	
	device_count=`echo $devices | $WC | $AWK '{ print $2 }'`

	#
	# How many did we find?
	#

	if test "$device_count" = "0"; then
	    AC_MSG_RESULT([none found])
	    AC_MSG_ERROR([cannot continue])
	elif test "$device_count" = "1"; then
	    DEVICE=$devices
	    AC_MSG_RESULT([found $DEVICE MPICH device])
	else
	    AC_MSG_RESULT([found multiple MPICH devices])
	    DEVICE=0
	    while test "$DEVICE" = "0"; do
		prompt "Please select an MPICH device ($devices):"
		read DEVICE
		DEVICE=`echo "$DEVICE" | sed -e 's/^[	]*//' -e 's/[	]*$//'`

		if test ! -d "$WITHDIR/$MPICHLIBDIR/$ARCH/$DEVICE"; then
		    echo "$DEVICE MPICH device not found"
		    DEVICE=0
		fi
	    done
	fi
	MPICH_DEV=$MPICHLIBDIR/$ARCH/$DEVICE

	# #$%^$#%^$@%@#%@#$!!!!!!!
	# Don't ask.  Trust us.
	# (the directory structure for MPICH changed between 1.1.1 and 1.1.2
	if test "$MPICH_VERSION" = "1.1.2."; then
	    MPICH_DEV=$MPICH_DEV/lib
	fi
    else
	AC_MSG_ERROR([could not find MPICH support for $ARCH])
    fi
    
    ARCH=$OLD_ARCH

    # Look for the actual PROGRAMS; don't use the versions!
    if test -x $MPICH_BIN/mpiCC ; then
        # MPICH 1.2.0 and later
        MPI_CXX=$MPICH_BIN/mpiCC
	# Tell mpiCC to not load mpi++.h when reading mpi.h
        CXXFLAGS="$CXXFLAGS -DMPICH_SKIP_MPICXX"
        CXX=$MPI_CXX
        MPI_LIBS="-lmpich"
    elif test -x $WITHDIR/$MPICH_DEV/../bin/mpiCC ; then 
        # MPICH 1.1.2 and later
        MPI_CXX=$WITHDIR/$MPICH_DEV/../bin/mpiCC
        CXX=$MPI_CXX
        MPI_LIBS="-lmpich"
        # We should NOT be using this, since the MPICH library name is
	# a configure-time parameter
    elif test -x $WITHDIR/$MPICH_DEV/mpiCC ; then
	# MPICH 1.1.1
        MPI_CXX=$WITHDIR/$MPICH_DEV/mpiCC
        CXX=$MPI_CXX
        MPI_LIBS="-lmpich"
    else
	# MPICH 1.1.0 and earlier
        MPI_LIBS="-lmpi"
    fi
    # JGS not sure were these should go
    MPI_CXXFLAGS="-I$WITHDIR/include"
    MPI_LDFLAGS="-L$WITHDIR/$MPICH_DEV"

    if test "$ARCH" != "IRIX"; then
      WANT_SOCKET_LIBS=1
    fi
    WANT_THREAD_LIBS=1

fi


#
# IBM SP
#

AC_ARG_WITH(sp,	[--with-sp		Use IBM's SP/MPI], MPI_IMP="ibm-sp" CXX=mpCC)

if test "$MPI_IMP" = "ibm-sp"; then
    AC_PATH_PROG(MPI_CXX, mpCC, doh)
    if test "$MPI_CXX" = "doh"; then
        AC_MSG_CHECKING([for mpCC (elsewhere)])
        foreach comp /bin/mpCC /usr/bin/mpCC
            if test "$MPI_CXX" = "" -a -x $comp; then
                AC_MSG_RESULT([yes])
                MPI_CXX=$comp
            fi
        end
        if test "$MPI_CXX" = ""; then
            AC_MSG_RESULT([no])
            AC_MSG_ERROR([cannot continue -- put mpCC in your path])
        fi
    fi
    CXX=$MPI_CXX
   
    OPTFLAGS="-O3 -qstrict -qarch=pwr2 -qtune=pwr2s -Q"
    TEST_OPTFLAGS=$OPTFLAGS
    EXAM_OPTFLAGS=$OPTFLAGS

    AC_MSG_CHECKING([POE version])
    POE_VERSION=`lslpp -L ppe.poe | grep poe | awk '{ print $2 }'`
    if test "$POE_VERSION" = "2.1.0.14"; then
        AC_DEFINE(IBM21014)
        AC_MSG_RESULT([2.1.0.14 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.15"; then
        AC_DEFINE(IBM21015)
        AC_MSG_RESULT([2.1.0.15 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.16"; then
        AC_DEFINE(IBM21016)
        AC_MSG_RESULT([2.1.0.16 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.17"; then
        AC_DEFINE(IBM21017)
        AC_MSG_RESULT([2.1.0.17 (you should upgrade)])
    elif test "$POE_VERSION" = "2.1.0.18"; then
        AC_DEFINE(IBM21018)
        AC_MSG_RESULT([2.1.0.18 (good)])
    else
        AC_DEFINE(IBMUNKNOWN)
        AC_MSG_RESULT([Unknown version -- $POE_VERSION (good luck)])
    fi
fi


#
# SGI IRIX 6.4
#

AC_ARG_WITH(sgi,	[--with-sgi		Use SGI's IRIX/64 MPI], MPI_IMP="sgi" CXX=CC)
AC_ARG_WITH(sgi64,	[--with-sgi64		Use SGI's IRIX/64 MPI (force 64 bit mode)], MPI_IMP="sgi64" CXX=CC)

if test "$MPI_IMP" = "sgi" -o "$MPI_IMP" = "sgi64"; then
    MPI_LIBS="-lmpi"

    IV_DESTRUCTORS=0

    # If they just said "--with-sgi", go find the libmpi.so

    if test "$MPI_IMP" = "sgi"; then
        if test -f /usr/lib32/libmpi.so; then
            LIBDIR=/usr/lib32
            SGIFLAGS="-n32"
            SGIBIT="n32"
        elif test -f /usr/lib64/libmpi.so; then
            LIBDIR=/usr/lib64
            SGIFLAGS="-64"
            SGIBIT="64"
        else
            AC_MSG_ERROR([cannot find libmpi.so in /usr/lib32 or /usr/lib64])
        fi
    elif test "$MPI_IMP" = "sgi64"; then
        if test -f /usr/lib64/libmpi.so; then
	    AC_DEFINE(POINTER, long)
            LIBDIR=/usr/lib64
            SGIFLAGS="-64"
            SGIBIT="64"
        else
            AC_MSG_ERROR([cannot find libmpi.so in /usr/lib64])
        fi
    fi

    AC_MSG_CHECKING([SGI MPI version])
    IS20=`strings $LIBDIR/libmpi.so | grep "SGI MPI 2.0"`
    if test "$IS20" != ""; then    
        AC_DEFINE(SGI20)
        AC_MSG_RESULT([2.0 ($SGIBIT) (you should upgrade)])
        AC_MSG_WARN([*** You are advised to get the latest version of SGI's MPI])
        AC_MSG_WARN([*** See http://www.sgi.com/Products/Evaluation/evaluation.html])
    else

      IS20=`strings $LIBDIR/libmpi.so | grep "SGI MPI 2.0"`
      if test "$IS20" != ""; then    
        AC_DEFINE(SGI20)
        AC_MSG_RESULT([2.0 ($SGIBIT) (you should upgrade)])
        AC_MSG_WARN([*** You are advised to get the latest version of SGI's MPI])
        AC_MSG_WARN([*** See http://www.sgi.com/Products/Evaluation/evaluation.html])
      else

        IS30=`strings $LIBDIR/libmpi.so | grep "SGI MPI 3.0"`
        if test "$IS30" != ""; then
            AC_DEFINE(SGI30)
            AC_MSG_RESULT([3.0 ($SGIBIT -- you should upgrade)])
        else

          IS31=`strings $LIBDIR/libmpi.so | grep "SGI MPI 3.1"`
          if test "$IS31" != ""; then
              AC_DEFINE(SGI30)
              AC_MSG_RESULT([3.1 ($SGIBIT -- good)])
          else
              VER=`strings $LIBDIR/libmpi.so | grep "SGI MPI"`
              AC_DEFINE(SGIUNKNOWN)
              
              AC_MSG_RESULT([Unknown version ($SGIBIT) -- $VER (good luck)])
          fi
        fi
      fi
    fi
    MPI_CXXFLAGS="$SGIFLAGS"
    MPI_LDFLAGS="$SGIFLAGS"
fi


#
# Cray
#

AC_ARG_WITH(cray,       [--with-cray            Use Cray's native MPI], MPI_IMP="cray")

if test "$MPI_IMP" = "cray"; then
    MPI_LIBS="-lmpi"
    CXX=CC
    MPI_CXX=CC

    AC_DEFINE(CRAY)
    AC_MSG_CHECKING([Cray MPI version])
    CRAYVER=`ls -ld /opt/ctl/mpt/mpt | awk '{ print $11 }' | cut -d/ -f5`
    if test "$CRAYVER" = "1.1.0.4"; then
        AC_DEFINE(CRAY1104)
	AC_MSG_RESULT([1.1.0.4 (good)])
    else
	AC_DEFINE(CRAYUNKNOWN)
	AC_MSG_RESULT([unknown Cray MPI version -- good luck!])
    fi

    MPI_CXXFLAGS="-hnomessage=427"
    MPI_LDFLAGS=""
fi


#
# HP-UX
#

AC_ARG_WITH(hp,		[--with-hp		Use HP's HP-UX 10.x MPI], MPI_IMP="hp")

if test "$MPI_IMP" = "hp"; then
        if test "$MPI_ROOT" = ""; then
                MPI_ROOT="/opt/mpi"
                AC_MSG_WARN([\$MPI_ROOT is defaulting to /opt/mpi.])
                AC_MSG_WARN([Override it by setting it manually and re-running configure.])
        fi

	MPI_CXX=$MPI_CXX_SAVE
        if test "$MPI_CXX" = ""; then
                MPI_CXX=aCC
                AC_MSG_WARN([You need to set \$MPI_CXX to the appropriate compiler.])
                AC_MSG_WARN([Defaulting to aCC.])
        fi

        AC_MSG_CHECKING([HP-UX MPI version])
        if ! test -r $MPI_ROOT/lib/pa1.1/libmpi.a; then
                AC_MSG_RESULT([cannot find libmpi.a!])
                AC_MSG_ERROR([Is \$MPI_ROOT set properly?])
        fi

        HPSTR=`what $MPI_ROOT/lib/pa1.1/libmpi.a | grep "HP MPI"`
	HPVER=`echo $HPSTR | cut -d. -f2-3`
        if test "$HPVER" = "01.02"; then
                AC_DEFINE(HPUX0102)
                AC_MSG_RESULT([1.2 (you should upgrade)])
	else
		HPVER=`echo "$HPSTR" | sed -e "s/[[^0-9\.]]*//" | cut -c1-5`
               	if test "$HPVER" = "01.03"; then
			AC_DEFINE(HPUX0103)
			AC_MSG_RESULT([1.3 (good )])
                elif test "$HPVER" = "01.05"; then
                        AC_DEFINE(HPUX0105)
                        AC_MSG_RESULT([1.5 (good)])
		else
                	AC_DEFINE(HPUNKNOWN)
                	AC_MSG_RESULT([Unknown version -- $HPVER (good luck)])
        	fi
	fi

        AC_MSG_CHECKING([for mpiCC compiler])
        if test -x $MPI_ROOT/bin/mpiCC; then
                CXX="$MPI_ROOT/bin/mpiCC"
                AC_MSG_RESULT([$CXX])
        else
                AC_MSG_RESULT([not found!])
                AC_MSG_ERROR([ensure that mpiCC is in \$MPI_ROOT/bin])
        fi
fi

#
# Generic MPI: Top-level dir
#

AC_ARG_WITH(mpidir,	[--with-mpidir=MPI_DIR	Top-level MPI directory (if not listed above)], MPI_IMP="supplied-topdir" MPI_DIR=$withval)

if test "$MPI_IMP" = "supplied-topdir"; then
    if test ! -d $WITHDIR; then
        AC_MSG_ERROR([$WITHDIR does not exist])
    elif test ! -d $WITHDIR/include; then
        AC_MSG_ERROR([$WITHDIR/include does not exist])
    elif test ! -d $WITHDIR/lib; then
        AC_MSG_ERROR([$WITHDIR/lib does not exist])
    fi

    MPI_CXXFLAGS="-I$MPIDIR/include"
    MPI_LDFLAGS="-L$WITHDIR/$MPICHLIBDIR"
    MPI_LIBS="-lmpi"
    WANT_SOCKET_LIBS=1
fi


#
# Generic MPI: Include directory / library directory
#

AC_ARG_WITH(mpiinc,	[--with-mpiinc=MPI_INC	Directory where mpi.h exists], MPI_IMP="supplied-indiv" INCDIR=$withval)
AC_ARG_WITH(mpilib,	[--with-mpilib=MPI_INC	Directory where libmpi.a exists], MPI_IMP="supplied-indiv" LIBDIR=$withval)

if test "$MPI_IMP" = "supplied-indiv"; then
    if test "$INCDIR" = ""; then
        AC_MSG_ERROR([no include directory specified (--with-mpiinc)])
    elif test "$LIBDIR" = ""; then
        AC_MSG_ERROR([no library directory specified (--with-mpilib)])
    elif test ! -d "$INCDIR"; then
        AC_MSG_ERROR([$INCDIR does not exist])
    elif test ! -d "$LIBDIR"; then
        AC_MSG_ERROR([$LIBDIR does not exist])
    fi

    MPI_CXXFLAGS="-I$INCDIR/include"
    MPI_LDFLAGS="-L$LIBDIR/lib"
    MPI_LIBS="-lmpi"
    WANT_SOCKET_LIBS=1
fi

#
# Profilable option for MPI C++ Bindings
#

AC_ARG_WITH(profiling,	[--with-profiling	Make the profilable C++ bindings], AC_DEFINE(_MPIPP_PROFILING_,1) NOPRO_OR_PRO="profile", NOPRO_OR_PRO="noprofile")

#
# Setup C++ compiler
#

if test "$CXX" = "" -a "$MPI_CXX" != ""; then
    CXX=$MPI_CXX
fi

AC_PROG_CXX
AC_PROG_CXXCPP
AC_AIX

BALKY_CXX=$CXX


#
# Some compilers are brain dead and complain about inline
# virtual destructors
#

AC_DEFINE_UNQUOTED(IV_DESTRUCTORS, $IV_DESTRUCTORS)

#
# Get the version number
#

VERSION=`cat $ac_confdir/VERSION | cut -f5 -d\ `


#
# Exception handling flags
#

AC_ARG_WITH(exflags,   [--with-exflags          Specify flags necessary to enable exceptions], FORCE_EXFLAGS=$withval)

AC_MSG_CHECKING([for compiler exception flags])
if test "$FORCE_EXFLAGS" != ""; then
    EXFLAGS=$FORCE_EXFLAGS
elif test "$GXX" = "yes"; then
    CXXFLAGS_SAVE=$CXXFLAGS
    CXXFLAGS="$CXXFLAGS -fexceptions"
    AC_TRY_COMPILE(, [try { int i = 0; } catch(...) { int j = 2; }], HAPPY=1, HAPPY=0)

    if test "$HAPPY" = "1"; then
	EXFLAGS="-fexceptions";
    else
	CXXFLAGS="$CXXFLAGS_SAVE -fhandle-exceptions"
	AC_TRY_COMPILE(, [try { int i = 0; } catch(...) { int j = 2; }], HAPPY=1, HAPPY=0)
	if test "$HAPPY" = "1"; then
	    EXFLAGS="-fhandle-exceptions";
	fi
    fi
    AC_DEFINE(G_PLUS_PLUS, 1)
elif test "$CXX" = "KCC" -o "$LAMHCP" = "KCC"; then
    EXFLAGS="-x"
    CXXFLAGS=$CXXFLAGS_SAVE
fi

EXCPTN_CXXFLAGS=$EXFLAGS
CXXFLAGS="$EXFLAGS $CXXFLAGS"
EXCPTN_LDFLAGS="$EXFLAGS"
if test "$EXFLAGS" = ""; then
    AC_MSG_RESULT([none necessary])
else
    AC_MSG_RESULT([$EXFLAGS])
fi


#
# Check to see if this compiler can handle exceptions 
#

# Since our errhandling test in the testsuite fails
# when compiling with g++ (both 2.8 and with egcs)
# we'll specify no exceptions for g++
#
# This needs to test for the problem, so that when g++/egcs is fixed, this
# will still work! - WDG

AC_MSG_CHECKING([for throw/catch])
AC_TRY_COMPILE(, int i=1; throw(i);, have_excep=yes, have_excep=no)
if test "$GXX" = "yes"; then
    AC_DEFINE(_MPIPP_USEEXCEPTIONS_, 0)
    AC_MSG_RESULT([no (g++ exceptions broken)])
elif test "$have_excep" = "yes"; then
    AC_DEFINE(_MPIPP_USEEXCEPTIONS_, 1)
    AC_MSG_RESULT([yes])
else
    AC_DEFINE(_MPIPP_USEEXCEPTIONS_, 0)
    AC_MSG_RESULT([no])
fi


#
# Set final compiler flags
#

MINI_BALKY_CXXFLAGS="$EXCPTN_CXXFLAGS $EXTRA_CXXFLAGS $MPI_CXXFLAGS -I`pwd`/src"
BALKY_CXXFLAGS="$EXCPTN_CXXFLAGS $EXTRA_CXXFLAGS $MPI_CXXFLAGS -I$INSTALLDIR/include -I$INSTALLDIR/include/mpi2c++-$VERSION"
CXXFLAGS="$CXXFLAGS $MPI_CXXFLAGS"


#
# Try to compile with the Balky flags, see if we can find <mpi.h>
#

AC_MSG_CHECKING([for mpi.h])
AC_TRY_COMPILE(#include <mpi.h>
, int i = 0;, mpih_found=yes, mpih_found=no)
if test "$mpih_found" = "yes"; then
    AC_MSG_RESULT([yes])
else
    AC_MSG_RESULT([no])
    AC_MSG_ERROR([cannot continue -- cannot find <mpi.h>])
fi


#
# Look for extra libraries
#

if test "$WANT_SOCKET_LIBS" = "1"; then
    AC_CHECK_LIB(socket, getservbyname, socket_lib="-lsocket", socket_lib="")
    AC_CHECK_LIB(nsl, gethostbyaddr, nsl_lib="-lnsl", nsl_lib="")
fi
if test "$WANT_THREAD_LIBS" = "1"; then
    AC_CHECK_LIB(thread, sigwait, thread_lib="-lthread", thread_lib="")
fi
EXTRA_LIBS="$socket_lib $nsl_lib $thread_lib"


#
# Set final linker flags
#

LDFLAGS="$LDFLAGS $MPI_LDFLAGS"
LIBS="$MPI_LIBS $EXTRA_LIBS"

MINI_BALKY_LDFLAGS="$EXCPTN_LDFLAGS $EXTRA_LDFLAGS $MPI_LDFLAGS -L`pwd`/src -lmpi++ $MPI_LIBS $EXTRA_LIBS"
BALKY_LDFLAGS="$EXCPTN_LDFLAGS $EXTRA_LDFLAGS $MPI_LDFLAGS -L$INSTALLDIR/lib -lmpi++ $MPI_LIBS $EXTRA_LIBS"


#
# Try to link with the Balky flags, see if we can find libmpi.*
# (if necessary)
#

if test "$MPI_LIBS" != ""; then
    AC_MSG_CHECKING([for MPI_Initialized in $MPI_LIBS])
    AC_TRY_LINK(#include <mpi.h>
, int i; MPI_Initialized(&i);, libmpi_found=yes, libmpi_found=no)
    if test "$libmpi_found" = "yes"; then
        AC_MSG_RESULT([yes])
    else
        AC_MSG_RESULT([no])
        AC_MSG_ERROR([cannot continue -- cannot link to -lmpi])
    fi
fi


#
# Override optimization flags, if supplied
#

AC_ARG_WITH(noopt,	[--without-opt		Compile with no optimization (for debugging)], OPTFLAGS="$NOOPT" TEST_OPTFLAGS="$NOOPT" EXAM_OPTFLAGS="$NOOPT")
AC_ARG_WITH(libopt,     [--with-libopt		Opt flags for use when compiling libmpi++.a], OPTFLAGS=$withval)
AC_ARG_WITH(testopt,    [--with-testopt		Opt flags for use when compiling test suite], TEST_OPTFLAGS=$withval)
AC_ARG_WITH(examopt,    [--with-examopt		Opt flags for use when compiling examples], EXAM_OPTFLAGS=$withval)


#
# Get peculiarities about our MPI
# Can our MPI use its constants as initializers before MPI_Init() is called?
#

AC_DEFINE_UNQUOTED(MPI_CONSTANTS_BAD, $MPI_CONSTANTS_BAD)



# At least one implementation has this problem
# (no names mentioned...)
#

AC_MSG_CHECKING([whether to use MPI(_ERR)_PENDING])
AC_TRY_COMPILE(#include <mpi.h>)
, int yow=MPI_PENDING;, use_pending=yes, use_pending=no)
if test "$use_pending" = "yes"; then
    AC_DEFINE(HAVE_PENDING, 1)
    AC_MSG_RESULT([MPI_PENDING])
else
    AC_DEFINE(HAVE_PENDING, 0)
    AC_MSG_RESULT([MPI_ERR_PENDING])
fi


#
# Find out how to make libraries
#

AC_PROG_INSTALL
# Override the buggy /bin/installbsd in AIX
case "$host" in
    rs6000-ibm-aix*)
        if test "$INSTALL" = "/bin/installbsd" -o \
            "$INSTALL" = "/bin/installbsd -c" -o \
            "$INSTALL" = "/usr/bin/installbsd" -o \
            "$INSTALL" = "/usr/bin/installbsd -c" -o \
            "$INSTALL" = "/bin/install" -o \
            "$INSTALL" = "/bin/install -c" -o \
            "$INSTALL" = "/etc/install" -o \
            "$INSTALL" = "/etc/install -c" -o \
            "$INSTALL" = "/usr/bin/install" -o \
            "$INSTALL" = "/usr/bin/install -c" -o \
            "$INSTALL" = "/usr/ucb/install" -o \
            "$INSTALL" = "/usr/ucb/install -c"; then
            AC_MSG_WARN([overriding buggy AIX $INSTALL... ./install-sh -c])
            INSTALL="./install-sh -c"
        fi

	AC_DEFINE(MPI2CPP_AIX, 1)
        ;;

    *aix*)
	AC_DEFINE(MPI2CPP_AIX, 1)
	;;
esac
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar, ;)
AC_PROG_LN_S
AC_PATH_PROG(BINSH, sh)


#
# Various compiler checks
#
# Check for the "bool" type, and for the items "true" and "false"
# Autoconf 2.9 AC-CHECK-TYPE is buggy, hence this workaround
#

AC_MSG_CHECKING([for bool type])
AC_TRY_COMPILE(#include <sys/types.h>
#include <stdlib.h>
, bool testme; testme = true; testme = false; testme = true ? false : true;
, bool_found=yes, bool_found=no)
if test "$bool_found" = "yes"; then
    AC_DEFINE(HAVE_BOOL, 1)
    BOOL_TYPE="bool"
    AC_MSG_RESULT([yes])
else
    AC_DEFINE(HAVE_BOOL, 0)
    BOOL_TYPE="unsigned int"
    AC_MSG_RESULT([no])
fi
AC_DEFINE_UNQUOTED(MPI2CPP_BOOL_T, $BOOL_TYPE)


#
# Check to see if the resulting bool type is the same size as an int
# Just to make it easy (and uniform), always check, even if this compiler
# does not have a native "bool" type.
#
# I don't know why autoconf is forcing me to put in cross compiling sizes!
# Reset the LDFLAGS and LIBS arguments so that we don't get -lmpi or
# other extraneous libraries in the test executables.
#

SAVE_LDFLAGS=$LDFLAGS
SAVE_LIBS=$LIBS
LDFLAGS=
LIBS=

AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(MPI2CPP_BOOL_T, 4)


LDFLAGS=$SAVE_LDFLAGS
LIBS=$SAVE_LIBS


#
# MPI says that attributes will be at least as large as pointers.
# If we're on a 64 bit system, the pointers may be 8 bytes, not 4.
# Attributes must be typed/sized appropriately.
#

AC_MSG_CHECKING([type of MPI attributes])
AC_TRY_RUN(int main() 
{
  if (sizeof(int) != sizeof(int *))
    return -1;
  return 0;
}, sizeof_same=yes, sizeof_same=no, sizeof_same=no)
if test "$sizeof_same" = "yes"; then
    ATTR_TYPE="int"
    AC_DEFINE(ATTR, int)     
else
    ATTR_TYPE="long"
    AC_DEFINE(ATTR, long)
fi
AC_MSG_RESULT([$ATTR_TYPE])


#
# Do we have BSD or SYSV style signals?
# (or something that we haven't thought of yet?)
#

AC_MSG_CHECKING([for signal declaration])
AC_TRY_COMPILE(#include<signal.h>
, 
void handler(int sig, int code, struct sigcontext *scp, char *addr);
signal(1, handler);
  struct sigaction n;
  n.sa_handler= (signal_handler) handler;
  n.sa_mask= 0;
  n.sa_flags= 0;
, bsd_signal="yes", bsd_signal="no")
if test "$bsd_signal" = "yes"; then
    AC_DEFINE(MPI2CPP_BSD_SIGNAL, 1)
    AC_MSG_RESULT([BSD])
else
#
# Sanity check.  Make sure that it is SYSV
#

AC_TRY_COMPILE(#include<signal.h>
void handler(int sig) {};
, 
signal(1, handler);
, sysv_signal="yes", sysv_signal="no")
    if test "$sysv_signal" = "yes"; then
        AC_DEFINE(MPI2CPP_SYSV_SIGNAL, 1)
        AC_MSG_RESULT([SYSV])
    else
        AC_MSG_RESULT([not found])
        AC_MSG_ERROR([cannot determine if signals are bsd/sysv])
        exit
    fi
fi

#
#  Check for namespaces
#  @#%$@#^ g++!  It has namespaces, but is VERY broken
#

FORCE_NAMESPACE=
AC_ARG_WITH(namespace,  [--with-namespace        Force the use of C++ namespaces], FORCE_NAMESPACE=$withval)

AC_MSG_CHECKING([for namespace support])
if test "$FORCE_NAMESPACE" = "yes"; then
    AC_DEFINE(_MPIPP_USENAMESPACE_, 1)
    AC_MSG_RESULT([yes (forced)])
elif test "$FORCE_NAMESPACE" = "no"; then 
    AC_DEFINE(_MPIPP_USENAMESPACE_, 0)
    AC_MSG_RESULT([no (forced)])
else
    AC_TRY_COMPILE(
void blah();
namespace N {
  extern const int global;
  class foo {
    //g++ does not like :: operator for global scope
    // but I think I can work around this
    //    friend void ::blah();
  public:
    int foobar();
  };
}

//aCC con't handle the following line confuses namespaces and classes
const int N::global = 0;

//g++ does not like namespace'd return types
N::foo blahblah() { N::foo f; return f; }
//g++ does not like functions of classes in namespaces
int N::foo::foobar() { return 1; }
void blah() { }
,  , namespace_found=yes, namespace_found=no)
    if test "$namespace_found" = "yes"; then
	AC_DEFINE(_MPIPP_USENAMESPACE_, 1)
	AC_MSG_RESULT([yes])
    else
	AC_DEFINE(_MPIPP_USENAMESPACE_, 0)
	AC_MSG_RESULT([no])
    fi
fi

#
# See if the compiler makes template repository directories
# Warning: this is a really screwy example! -JMS
#

AC_MSG_CHECKING([for template repository])
mkdir oompi_tmp_$$
cd oompi_tmp_$$
cat > foo.h <<EOF
template <class T>
class foo {
public:
  foo(T yow) : data(yow) { yow.member(3); };
  void member(int i);
private:
  T data;
};

class bar {
public:
  bar(int i) { data = i; };
  void member(int j) { data = data * j; };

private:
  int data;
};
EOF

cat > other.cc <<EOF
#include "foo.h"

void
some_other_function(void)
{
  foo<bar> var1(6);
  foo< foo<bar> > var2(var1);
}
EOF

cat > main.cc <<EOF
#include "foo.h"

void some_other_function(void);

template <class T>
void
foo<T>::member(int i)
{
  i += 2;
}

int
main(int argc, char *argv[])
{
  foo<bar> var1(6);
  foo< foo<bar> > var2(var1);

  some_other_function();
  return 0;
}
EOF

$CXX -c main.cc >/dev/null 2>/dev/null
$CXX -c other.cc >/dev/null 2>/dev/null
rm -rf *.h *.cc *.o

for file in `ls`
do
    if test "$file" != "." -a "$file" != ".."; then
	# Is it a directory?
	if test -d "$file"; then
            TEMPLATE_DIR="$file $TEMPLATE_DIR"

	# Or is it a file?
	else
	    name="`echo $file | cut -d. -f1`"

	    temp_mask=
	    if test "$name" = "main" -o "$name" = "other"; then
		temp_mask="`echo $file | cut -d. -f2`"
		if test "$TEMPLATE_FILEMASK" = ""; then
		   TEMPLATE_FILEMASK="$temp_mask";
		elif test "`echo $TEMPLATE_FILEMASK | grep $temp_mask`" = ""; then
		   TEMPLATE_FILEMASK="$TEMPLATE_FILEMASK $temp_mask"
		fi
	    fi
	fi
    fi
done
if test "$TEMPLATE_FILEMASK" != ""; then
    temp_mask=
    for mask in $TEMPLATE_FILEMASK
    do
	temp_mask="*.$mask $temp_mask"
    done
    TEMPLATE_FILEMASK=$temp_mask
fi
TEMPLATE_REP="$TEMPLATE_DIR $TEMPLATE_FILEMASK"

if test "$TEMPLATE_REP" != ""; then
    AC_MSG_RESULT([$TEMPLATE_REP])
else
    AC_MSG_RESULT([not used])
fi
cd ..
rm -rf oompi_tmp_$$

#
# Check to see if the FORTRAN constants are there, 
# and then check for the optional FORTRAN constants.
#

AC_MSG_CHECKING([for FORTRAN constants])
AC_TRY_COMPILE(#include <mpi.h>
, MPI_Datatype a = MPI_INTEGER;, fortran_found=yes, fortran_found=no)
if test "$fortran_found" = "yes"; then
    AC_DEFINE(FORTRAN, 1)
    AC_MSG_RESULT([yes])
    AC_MSG_CHECKING([for optional FORTRAN constants])
    AC_TRY_COMPILE(#include <mpi.h>
    , MPI_Datatype b = MPI_8REAL;, all_found=yes, all_found=no)
    if test "$all_found" = "yes"; then
	AC_DEFINE(ALL_OPTIONAL_FORTRAN, 1)
	AC_MSG_RESULT([all])
    else
	AC_DEFINE(ALL_OPTIONAL_FORTRAN, 0)
	AC_TRY_COMPILE(#include <mpi.h>
	, MPI_Datatype c = MPI_2REAL;, some_found=yes, some_found=no)
	if test "$some_found" = "yes"; then
	    AC_DEFINE(SOME_OPTIONAL_FORTRAN, 1)
	    AC_MSG_RESULT([some])
	else
	    AC_DEFINE(SOME_OPTIONAL_FORTRAN, 0)
	    AC_MSG_RESULT([none])
	fi
    fi
else
    AC_DEFINE(FORTRAN, 0)
    AC_MSG_RESULT([no])
fi

#
# Check for optional C stuff.
#

AC_MSG_CHECKING([for optional C constants])
AC_TRY_COMPILE(#include <mpi.h>
, MPI_Datatype d = MPI_UNSIGNED_LONG_LONG; MPI_Datatype d = MPI_LONG_LONG;, c_found=yes, c_found=no)
if test "$c_found" = "yes"; then
    AC_DEFINE(OPTIONAL_C, 1)
    AC_MSG_RESULT([yes])
else
    AC_DEFINE(OPTIONAL_C, 0)
    AC_MSG_RESULT([no])
fi

#
# Substitute them in...
#

AC_SUBST(VERSION)

AC_SUBST(MPI_CXX)
AC_SUBST(MPILIB_DIR)


AC_SUBST(INSTALL)
AC_SUBST(AR)
AC_SUBST(RANLIB)

AC_SUBST(BALKY_CXX)
AC_SUBST(BALKY_INCDIR)
AC_SUBST(BALKY_LIBDIR)
AC_SUBST(BALKY_CXXFLAGS)
AC_SUBST(BALKY_LDFLAGS)

AC_SUBST(MINI_BALKY_CXXFLAGS)
AC_SUBST(MINI_BALKY_LDFLAGS)

AC_SUBST(DEFS)
AC_SUBST(DEPFLAGS)

AC_SUBST(OPTFLAGS)
AC_SUBST(TEST_OPTFLAGS)
AC_SUBST(EXAM_OPTFLAGS)

AC_SUBST(INSTALLDIR)
AC_SUBST(IV_DESTRUCTORS)
AC_SUBST(TEMPLATE_REP)

AC_SUBST(MPI_CXX)
AC_SUBST(MPILIB_DIR)
AC_SUBST(NOPRO_OR_PRO)

AC_SUBST(VPATH)
#
# Party on
#
if test ! -d contrib ; then mkdir contrib ; fi
AC_OUTPUT(Makefile
    src/Makefile
    contrib/test_suite/Makefile
    contrib/examples/Makefile
    balky/balky
    balky/mini-balky)
chmod +x balky/balky balky/mini-balky

