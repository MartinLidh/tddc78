dnl
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl
dnl
dnl
AC_INIT()
AC_CONFIG_HEADER( slog_config.h )
AC_CHECK_HEADERS( unistd.h )
#
# print_error is used by some of our macros.
print_error() {
    echo "*# $*" 2>&1 ;
    }
#
echo "Configuring SLOG with $ac_configure_args"
#
MAKE=${MAKE:-"make"}
SLOGNAME=slog
OPTFLAGS=""
MPICH=""
CFLAGS="-DNOWHERE -DCHECKTIMEORDER -DCOMPRESSION"
#
# Find the home directory if not specified
if test "X$srcdir" != "X." -a -s $srcdir/Makefile.in ; then 
    SLOG_TRIAL=$srcdir
else
    PAC_GETWD(SLOG_TRIAL,src/Makefile.in)
fi
SLOG_HOME=$SLOG_TRIAL
 
  
CC=${CC:-cc}

AC_ARG_WITH( cc, [--with-cc=SLOG_CC           **** pass the preferred CC compiler, e.g. --with-cc=xlc.  This will overide the environmental variable CC.], SLOG_CC="$withval" )
if test -n "$SLOG_CC" ; then
    CC="$SLOG_CC"
fi

#  Check if it is mpcc, then use xlc instead; this is for AIX
if test -n "` echo $CC | grep mpcc `" -o -n "` echo $CC | grep mpCC `" ; then
    CC="xlc"
fi

AC_ARG_WITH( cflags, [--with-cflags=SLOG_CFLAGS   **** pass extra CFLAGS to the CC compiler like optimization flags or special machine dependent flags, e.g. -64 for IRIX64 platform], SLOG_CFLAGS="$withval" ) 
if test -n "$SLOG_CFLAGS" ; then 
    CFLAGS="$CFLAGS $SLOG_CFLAGS"
fi
 
#AC_ARG_ENABLE( debug, [--enable-debug              **** Turn on/off the debugging and error checking code, default=disabed], DEBUG="$enableval", DEBUG=no )
AC_ARG_ENABLE( debug, [--enable-debug              **** Turn on/off the debugging and diagnostic code, default=disabled], , enable_debug=no )
if test "$enable_debug" = "yes" ; then
    CFLAGS="-DDEBUG $CFLAGS"
    if test -z "`echo $CFLAGS | grep "\-g"`"; then
        CFLAGS="-g $CFLAGS" 
    fi
fi
 
#
# Create the "autoconf" style directory names...
#
# When we build with the virtual path feature, we want these directories
# to be relative to the build directory, not the source directory.
# One possibility is to redefine the Makefiles to use a local directory, 
# with the "installation" directory given by the usual autoconf symbols (e.g.,
# libdir, includedir
#
# Default includedir should use prefix.  For installation in place, we should
# just use prefix=localdir
# Alternate is to use build/<arch>/<device>/include
# Include dir for USER PROGRAMS
if test -z "$prefix" ; then
    # Should this be $MPIR_HOME/build/$ARCH/$DEVICE?
    prefix=$SLOG_HOME
fi
# We can't use a relative srcdir path because autoconf1 has a bug that
# resets top_srcdir to srcdir!
# srcdir is the directory that contains SOURCE files.
if test -z "$srcdir" -o "$srcdir" = "." ; then srcdir="$SLOG_HOME" ; fi
AC_SUBST(srcdir)
if test -z "$exec_prefix" ; then 
    exec_prefix='${prefix}'
fi
# exec_prefix is the prefix for directories containing machine-specific
# files such as libraries and executables.  For the USER
AC_SUBST(exec_prefix)
# bindir is for executable programs for the USER
if test -z "$bindir" ; then bindir=$exec_prefix/bin ; fi
AC_SUBST(bindir)
# sbindir is for executable programs for the ADMINISTRATOR
if test -z "$sbindir" ; then sbindir=$exec_prefix/sbin ; fi
AC_SUBST(sbindir)
# libdir is for libraries for the USER
if test -z "$libdir" ; then libdir="$exec_prefix/lib" ; fi
AC_SUBST(libdir)
# prefix is used to construct the rest of the variables.
if test -z "$prefix" ; then prefix=$PREFIX ; fi
AC_SUBST(prefix)
# mandir is the root for the man pages
if test -z "$mandir" ; then mandir='${prefix}/man' ; fi
AC_SUBST(mandir)

# top_srcdir is the top level source code directory (slog home)
if test -z "$top_srcdir" -o "$top_srcdir" = "." ; then 
    top_srcdir=$SLOG_HOME 
fi
AC_SUBST(top_srcdir)
if test -z "$datadir" ; then
    datadir='${prefix}/share'
fi
AC_SUBST(datadir)
#
# libbuild_dir is used to build the libraries in before they are installed.
# binbuild_dir is for the scripts/programs
# includebuild_dir is for all user header files
rootbuild_dir=`pwd`
for dir in lib bin include ; do
    dirname=${dir}build_dir
    eval dirvalue=\$"$dirname"
    if test -z "$dirvalue" ; then 
        eval $dirname=$rootbuild_dir/$dir
    fi
    eval dirvalue=\$"$dirname"
    if test ! -d $dirvalue ; then
        if mkdir $dirvalue ; then
	    :
        else
            print_error"Could not create directory $dirvalue"
            exit 1
        fi
    fi
done
AC_SUBST(libbuild_dir)
AC_SUBST(binbuild_dir)
AC_SUBST(includebuild_dir)
#
# Fixup for make
PAC_MAKE_IS_GNUMAKE
PAC_MAKE_IS_BSD44
PAC_MAKE_IS_OSF
PAC_MAKE_VPATH
AC_SUBST(MAKE)
#
AC_PROG_LN_S
AC_PROG_CC
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar, ;)
#
#   -- Check if byteswapping needs to be done.
if test $cross_compiling = "yes" ; then
    AC_MSG_WARN([Cannot test for endianess when cross compiling, assuming big endian])
    AC_DEFINE(WORDS_BIGENDIAN)
else
    AC_C_BIGENDIAN
fi
AC_C_CONST
#   -- Check if there is any memory leak checking tool like "electric fence"
if test "$enable_debug" = "yes"; then
    AC_CHECK_LIB( efence, malloc, DEBUG_LIBS="-lefence" )
fi
##if test "$enable_debug" = "yes"; then
##    AC_MSG_CHECKING( whether electric fence exists )
##    TMP_LIBS=$LIBS
##    LIBS="-lefence"
##    AC_TRY_LINK( [#include <stdlib.h>],
##                 [ int *iptr; iptr = (int*) malloc(sizeof(int)) ],
##                 efence_exist=yes, efence_exist=no )
##    if test "$efence_exist" = "yes" ; then
##        AC_MSG_RESULT(yes)
##        DEBUG_LIBS="-lefence"
##    else
##        AC_MSG_RESULT(no)
##        DEBUG_LIBS=""
##    fi
##    LIBS=$TMP_LIBS
##fi
#
CFLAGS="$CFLAGS -DHAVE_SLOGCONF_H"
AC_FUNC_ALLOCA
#
#
AC_SUBST(LN_S)
AC_SUBST(CC)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(SLOGNAME)
AC_SUBST(OPTFLAGS)
AC_SUBST(MPICH)
AC_SUBST(SLOG_HOME)
AC_SUBST(CFLAGS)
AC_SUBST(DEBUG_LIBS)
#AC_OUTPUT(Makefile src/Makefile src/test_fbuf/Makefile src/test_misc/Makefile)
AC_OUTPUT(Makefile src/Makefile)
