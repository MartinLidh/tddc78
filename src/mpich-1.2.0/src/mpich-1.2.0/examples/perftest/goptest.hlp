goptest - test individual communication speeds
Test a collective communication by various methods.  The tests are 
combinations of
  Message sizes:
  -size start end stride                  (default 0 1024 32)
               Messages of length (start + i*stride) for i=0,1,... until
               the length is greater than end.
  -sizelist n1,n2,...
               Messages of length n1, n2, etc are used.  This overrides 
               -size

  Number of tests
  -reps n      Number of times message is sent (default 1000)
  -autoreps    Compute the number of times a message is sent automatically
  -tgoal  d    Time that each test should take, in seconds.  Use with 
               -autoreps
  -rthresh d   Fractional threshold used to determine when minimum time
               has been found.  The default is 0.05.


  Output options
  -nohead      Do not print graphics header info
  -notail      Do not print graphics tail info
  -noinfo      Print neither head nor tail

  -gop [ options ]:

Collective Tests:
-dsum     : reduction (double precision)
-isum     : reduction (integer)
-sync     : synchronization
-colx     : collect with known sizes
-colxex   : collect with known sizes with exchange alg.
-scatter  : scatter
-bcast    : another name for -scatter

Collective test control:
-pset n-m            : processor set consisting of nodes n to m
Collective communication algorithms:
-rr n   : use a ready-receiver version for messages n bytes or longer
          (many operations do not yet have rr versions)
-ring   : use a ring algorithm
-tree   : use a tree algorithm
-line   : use a linear algorithm

Options for collective algorithms
-pkt len stride cnt : use packets of length len
-fast               : use a (possibly) contention-free tree

Output
  -cit         Generate data for CIt (default)
  -gnuplot     Generate data for GNUPLOT
  -givedy      Give the range of data measurements
  -fname filename             (default is stdout)
               (opened for append, not truncated)
  -noinfo      Do not generate plotter command lines or rate estimate
  -wx i n      windows in x, my # and total #
  -wy i n      windows in y, my # and total #
  -lastwindow  generate the wait/new page (always for 1 window)
